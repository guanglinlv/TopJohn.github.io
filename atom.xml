<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[TopJohn'Blog]]></title>
  <subtitle><![CDATA[Coding的路上，至少我乐在其中...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.xuanzhangjiong.xyz/"/>
  <updated>2015-12-19T11:53:04.000Z</updated>
  <id>http://www.xuanzhangjiong.xyz/</id>
  
  <author>
    <name><![CDATA[John]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android技术贴总汇]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/12/19/android%E5%AD%A6%E4%B9%A0%E6%80%BB%E6%B1%87/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/12/19/android学习总汇/</id>
    <published>2015-12-19T08:12:38.000Z</published>
    <updated>2015-12-19T11:53:04.000Z</updated>
    <content type="html"><![CDATA[<p>收藏夹里积攒了好多自己喜欢的blog和帖子，是时候找个时间整理下了，方便他人学习，为他人填坑，也方便自己以后的回顾，so,let’s begin…</p>
<ul>
<li><p><a href="http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a>从android开发入门，到后来的进阶，stormzhang提供了许多自己宝贵的经验，值得拜读。</p>
</li>
<li><p><a href="http://tech.meituan.com/" target="_blank" rel="external">美团技术团队</a>美团在做一些技术上的分享，在国内属于领先的地位，里面有一些和移动开发相关高质量文章。</p>
</li>
<li><p><a href="http://bugly.qq.com/blog/" target="_blank" rel="external">腾讯Bugly博客</a>腾讯Bugly博客</p>
</li>
<li><p><a href="http://tools.android.com/recent" target="_blank" rel="external">Recent Changes</a>了解Android新动态，需要翻墙。</p>
</li>
<li><p><a href="http://androidweekly.net/" target="_blank" rel="external">Android Weekly</a>Android周报，英文，邮箱订阅。</p>
</li>
<li><p><a href="http://www.androidweekly.cn/" target="_blank" rel="external">Android 开发技术周报</a>国内的开发周报。</p>
</li>
<li><p><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools</a>提供了不翻墙下载Android相关工具的服务。</p>
</li>
<li><p><a href="http://android-developers.blogspot.ca/" target="_blank" rel="external">Android Blog</a>Android 官方的开发博客。</p>
</li>
<li><p><a href="http://developer.android.com/intl/zh-cn/index.html" target="_blank" rel="external">Android官网</a>官网对开发者提供了许多教程以及开发实例，坚持阅读，相信会受益匪浅。毋庸置疑，官网需要翻墙。</p>
</li>
<li><p><a href="https://github.com/pcqpcq/open-source-android-apps" target="_blank" rel="external">Android开源项目</a>提供了众多不同领域的开源项目，值得学习。</p>
</li>
<li><p><a href="http://www.jianshu.com/p/1078568e859f" target="_blank" rel="external">Android Material Design 最佳实践项目</a>对于Material Design众多组件的使用给出了详细的讲解说明，是MD入门的利器。</p>
</li>
<li><p><a href="http://v.youku.com/v_show/id_XODk2NjkwNjM2.html?f=23494296&amp;from=y1.7-1.3" target="_blank" rel="external">Android 性能模式 第一季(中字幕)</a>Google官方推出的性能优化视频，第一季。最初发布在Youtube，Google为了方便天朝人民观看，在优酷上也放了一份。</p>
</li>
<li><p><a href="http://v.youku.com/v_show/id_XMTMxNDIzODcxMg==.html?f=26016201&amp;from=y1.7-3" target="_blank" rel="external">Android 性能模式 第二季(中字幕)</a>Google官方推出的性能优化视频，第二季。</p>
</li>
<li><p><a href="http://v.youku.com/v_show/id_XMTMwMTYzNDQwMA==.html?f=25972284&amp;from=y1.7-3" target="_blank" rel="external">Android 性能模式 第三季(英字幕)</a>Google官方推出的性能优化视频，第三季。</p>
</li>
<li><p><a href="http://v.youku.com/v_show/id_XMTM1OTI3NDE2NA==.html?f=26144822&amp;from=y1.7-3" target="_blank" rel="external">Android 性能模式 第四季(英字幕)</a>Google官方推出的性能优化视频，第四季。</p>
</li>
<li><p><a href="http://hukai.me/" target="_blank" rel="external">胡凯的博客</a>胡凯大神，腾讯Android高级开发，做了许多优质的分享，发起了翻译Android Training Course的活动。</p>
</li>
<li><p><a href="http://a.codekk.com/" target="_blank" rel="external">CodeKK</a>国内Android开源领袖级的人物，博客中有许多眼前一亮的干货。</p>
</li>
<li><p><a href="http://litesuits.com/" target="_blank" rel="external">Lite Your Android</a>博主倡导极简生活，开源了一些极简概念的Android库。</p>
</li>
<li><p><a href="http://www.vmatianyu.cn/" target="_blank" rel="external">Liter’s Blog</a>这是上一条推荐项目的博主的个人博客，前辈的博文语重心长，非常诚恳。</p>
</li>
<li><p><a href="http://keeganlee.me/" target="_blank" rel="external">Keegan小钢</a>博客中又对Android动画以及项目重构的实战讲解。</p>
</li>
<li><p><a href="http://it.deepinmind.com/index.html" target="_blank" rel="external">Java基础及深入</a>非常棒的一个博客，有关Java学习的博文质量很高。</p>
</li>
<li><p><a href="http://www.itechzero.com/google-mirror-sites-collect.html" target="_blank" rel="external">Google镜像集合</a>持续更新，让你不翻墙也可以用Google搜索。</p>
</li>
<li><p><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/v3.0.html" target="_blank" rel="external">知道创宇研发技能表v3.0</a>对于Programer或者Geeker来说，这个技能表是必备的。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[平时发现的优质blog和技术贴，会持续更新]]>
    
    </summary>
    
      <category term="Android进阶优质资源" scheme="http://www.xuanzhangjiong.xyz/tags/Android%E8%BF%9B%E9%98%B6%E4%BC%98%E8%B4%A8%E8%B5%84%E6%BA%90/"/>
    
      <category term="Android" scheme="http://www.xuanzhangjiong.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用Git命令清单]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/09/01/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/09/01/常用Git命令清单/</id>
    <published>2015-09-01T13:07:23.000Z</published>
    <updated>2015-12-19T13:48:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/常用Git命令清单_1.jpg" alt=""></p>
<p>敲了N遍Git命令，还是很多记住住，今天看了一篇别人总结的Git命令，敲一遍，练练手吧。</p>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/常用Git命令清单_2.png" alt=""><br><br></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h1 id="一、新建代码库">一、新建代码库</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="keyword">clone</span> <span class="title">[url</span>]</span><br></pre></td></tr></table></figure>
<h1 id="二、配置">二、配置</h1><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line"><span class="variable">$ </span>git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line"><span class="variable">$ </span>git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line"><span class="variable">$ </span>git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure></p>
<h1 id="三、增加／删除文件">三、增加／删除文件</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line"><span class="variable">$ </span>git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="variable">$ </span>git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="variable">$ </span>git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="variable">$ </span>git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="variable">$ </span>git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="variable">$ </span>git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h1 id="四、代码提交">四、代码提交</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git <span class="keyword">commit</span> [file1] [file2] ... -<span class="keyword">m</span> [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次<span class="keyword">commit</span>之后的变化，直接到仓库区</span><br><span class="line">$ git <span class="keyword">commit</span> -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git <span class="keyword">commit</span> -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的<span class="keyword">commit</span>，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次<span class="keyword">commit</span>的提交信息</span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend -m [message]</span></span><br><span class="line"></span><br><span class="line"># 重做上一次<span class="keyword">commit</span>，并包括指定文件的新变化</span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend [file1] [file2] ...</span></span></span><br></pre></td></tr></table></figure>
<h1 id="五、分支">五、分支</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line"><span class="variable">$ </span>git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line"><span class="variable">$ </span>git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="variable">$ </span>git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="variable">$ </span>git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="variable">$ </span>git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="variable">$ </span>git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="variable">$ </span>git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="variable">$ </span>git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line"><span class="variable">$ </span>git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="variable">$ </span>git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line"><span class="variable">$ </span>git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line"><span class="variable">$ </span>git push origin --delete [branch-name]</span><br><span class="line"><span class="variable">$ </span>git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
<h1 id="六、标签">六、标签</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line"></span><br><span class="line"><span class="title"># 新建一个tag</span>在当前commit</span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [<span class="operator">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [<span class="operator">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [<span class="operator">tag</span>]</span><br></pre></td></tr></table></figure>
<h1 id="七、查看信息">七、查看信息</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line"><span class="variable">$ </span>git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line"><span class="variable">$ </span>git log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="variable">$ </span>git log --stat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="variable">$ </span>git log --follow [file]</span><br><span class="line"><span class="variable">$ </span>git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="variable">$ </span>git log -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="variable">$ </span>git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="variable">$ </span>git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="variable">$ </span>git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="variable">$ </span>git diff <span class="constant">HEAD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line"><span class="variable">$ </span>git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="variable">$ </span>git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="variable">$ </span>git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="variable">$ </span>git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="variable">$ </span>git reflog</span><br></pre></td></tr></table></figure>
<h1 id="八、远程同步">八、远程同步</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$ </span>git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line"><span class="variable">$ </span>git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$ </span>git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$ </span>git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure>
<h1 id="九、撤销">九、撤销</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个<span class="operator"><span class="keyword">commit</span>的指定文件到工作区</span><br><span class="line">$ git checkout [<span class="keyword">commit</span>] [<span class="keyword">file</span>]</span><br><span class="line"></span><br><span class="line"># 恢复上一个<span class="keyword">commit</span>的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次<span class="keyword">commit</span>保持一致，但工作区不变</span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">file</span>]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次<span class="keyword">commit</span>保持一致</span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard</span></span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定<span class="keyword">commit</span>，同时重置暂存区，但工作区不变</span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">commit</span>]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的<span class="keyword">HEAD</span>为指定<span class="keyword">commit</span>，同时重置暂存区和工作区，与指定<span class="keyword">commit</span>一致</span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard [commit]</span></span><br><span class="line"></span><br><span class="line"># 重置当前<span class="keyword">HEAD</span>为指定<span class="keyword">commit</span>，但保持暂存区和工作区不变</span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--keep [commit]</span></span><br><span class="line"></span><br><span class="line"># 新建一个<span class="keyword">commit</span>，用来撤销指定<span class="keyword">commit</span></span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [<span class="keyword">commit</span>]</span></span><br></pre></td></tr></table></figure>
<h1 id="十、其他">十、其他</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="variable">$ </span>git archive</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[看到别人写的挺好的，拿来敲一边，就当回顾总结吧，哈哈，太机智了...]]>
    
    </summary>
    
      <category term="码农必备常识" scheme="http://www.xuanzhangjiong.xyz/tags/%E7%A0%81%E5%86%9C%E5%BF%85%E5%A4%87%E5%B8%B8%E8%AF%86/"/>
    
      <category term="Git" scheme="http://www.xuanzhangjiong.xyz/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Flow简介]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/08/09/Git-Flow%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/08/09/Git-Flow简介/</id>
    <published>2015-08-09T08:37:14.000Z</published>
    <updated>2015-12-09T09:31:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="关于">关于</h1><p>git-flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作。<br>这里，我介绍下它的简单用法。<br>当然，我也只会这么一点点小技巧。</p>
<h1 id="安装">安装</h1><p>第一步当然，你必须要有一个git环境咯，我就不啰嗦了。<br>Mac下，有2种安装方式：<br>Homebrew:</p>
<p><code>brew install git-flow</code></p>
<p>Macports:</p>
<p><code>port install git-flow</code></p>
<p>没有上面两个包管理的童鞋自行GitHub吧。</p>
<h1 id="开始">开始</h1><p>为了自定义你的项目，Git flow需要初始化过程。<br>初始化<br>使用 git-flow，从初始化一个现有的 git 库内开始:</p>
<p><code>git flow init</code></p>
<p>你必须回答几个关于分支的命名约定的问题。<br>建议使用默认值。</p>
<h1 id="特性">特性</h1><p>为即将发布的版本开发新功能特性。<br>这通常只存在开发者的库中。</p>
<h2 id="增加新特性">增加新特性</h2><p>新特性的开发是基于 ‘develop’ 分支的。<br>通过下面的命令开始开发新特性：</p>
<p><code>git flow feature start MYFEATURE</code></p>
<p>这个操作创建了一个基于’develop’的特性分支，并切换到这个分支之下。</p>
<h2 id="完成新特性">完成新特性</h2><p>完成开发新特性。这个动作执行下面的操作。<br>合并 MYFEATURE 分支到 ‘develop’<br>删除这个新特性分支<br>切换回 ‘develop’ 分支</p>
<p><code>git flow feature finish MYFEATURE</code></p>
<h2 id="发布新特性">发布新特性</h2><p>你是否合作开发一项新特性？<br>发布新特性分支到远程服务器，所以，其它用户也可以使用这分支。</p>
<p><code>git flow feature publish MYFEATURE</code></p>
<h2 id="取得一个发布的新特性分支">取得一个发布的新特性分支</h2><p>取得其它用户发布的新特性分支，并签出远程的变更。</p>
<p><code>git flow feature pull MYFEATURE</code></p>
<h1 id="作一个release版本">作一个release版本</h1><p>支持一个新的用于生产环境的发布版本。<br>允许修正小问题，并为发布版本准备元数据。</p>
<h2 id="开始准备release版本">开始准备release版本</h2><p>开始准备release版本，使用 git flow release 命令.<br>它从 ‘develop’ 分支开始创建一个 release 分支。</p>
<p><code>git flow release start RELEASE [BASE]</code></p>
<p>你可以选择提供一个 [BASE]参数，即提交记录的 sha-1 hash 值，来开启动 release 分支. 这个提交记录的 sha-1 hash 值必须是’develop’ 分支下的。<br>创建 release 分支之后立即发布允许其它用户向这个 release 分支提交内容是个明智的做法。命令十分类似发布新特性：</p>
<p><code>git flow release publish RELEASE</code></p>
<p>(你可以通过 <code>git flow release track RELEASE</code>命令签出 release 版本的远程变更)</p>
<h2 id="完成release版本">完成release版本</h2><p>完成 release 版本是一个大 git 分支操作。它执行下面几个动作：<br>归并 release 分支到 ‘master’ 分支<br>用 release 分支名打 Tag<br>归并 release 分支到 ‘develop’<br>移除 release 分支</p>
<p><code>git flow release finish RELEASE</code></p>
<h1 id="紧急修复">紧急修复</h1><p>紧急修复来自这样的需求：生产环境的版本处于一个不预期状态，需要立即修正。<br>有可能是需要修正 master 分支上某个 TAG 标记的生产版本。</p>
<h2 id="开始git_flow紧急修复">开始git flow紧急修复</h2><p>像其它 git flow 命令一样, 紧急修复分支开始自：</p>
<p><code>git flow hotfix start VERSION [BASENAME]</code></p>
<p>VERSION 参数标记着修正版本。你可以从 [BASENAME]开始，[BASENAME]为finish release时填写的版本号</p>
<h2 id="完成紧急修复">完成紧急修复</h2><p>当完成紧急修复分支，代码归并回 develop 和 master 分支。相应地，master 分支打上修正版本的 TAG。</p>
<p><code>git flow hotfix finish VERSION</code></p>
]]></content>
    <summary type="html">
    <![CDATA[简化Git操作的神器]]>
    
    </summary>
    
      <category term="码农必备常识" scheme="http://www.xuanzhangjiong.xyz/tags/%E7%A0%81%E5%86%9C%E5%BF%85%E5%A4%87%E5%B8%B8%E8%AF%86/"/>
    
      <category term="Git" scheme="http://www.xuanzhangjiong.xyz/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[偶遇Git]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/07/29/%E5%81%B6%E9%81%87Git/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/07/29/偶遇Git/</id>
    <published>2015-07-29T11:26:41.000Z</published>
    <updated>2015-12-09T08:42:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="吐槽">吐槽</h1><p>说起Git，在很久以前就认识它，但是仅仅是知道它的存在，却从未和它交流过。</p>
<p>本科的时候，一直使用svn，而且是TortoiseGit，就是那只传说中的小乌龟，可视化的界面，导致我从来不用bash。</p>
<p>前段时间，跟着导师做一个创业项目，在做前期准备的时候，一句你们用过Git嘛，我的学生Git是一项必备技能。顿时好尴尬，只好硬着头皮说学过一点。然后就是不停地看各种blog。</p>
<p>前前后后也学习了一段时间，来写写自己学习Git的理解吧。</p>
<h1 id="三种状态">三种状态</h1><p>首先要理解你的本地仓库由git维护的三棵“树”组成。第一个是你的工作目录，它持有实际文件；第二个是缓存区（Index）它像个缓存区，临时保存你的改动；最后是HEAD，指向你最近一次提交后的结果。</p>
<blockquote>
<p>WorkingDirectory Index HEAD 三大状态，对理解Git工作原理很有帮助。</p>
</blockquote>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/git_1.jpg" alt="三种状态" title="三种状态"></p>
<h1 id="检出仓库">检出仓库</h1><p>执行如下命令以创建一个本地仓库的克隆版本<br><code>git clone /path/to/repository</code><br>如果是远端服务器上的仓库，你的命令会是这个样子：<br><code>git clone username@host:/path/to/repository</code></p>
<h1 id="添加与提交">添加与提交</h1><p>你可以计划改动（把它们添加到缓存区），使用如下命令：<br><code>git add &lt;filename&gt;</code><br><code>add *</code><br><code>add .</code><br>这是git基本工作流程的第一步；使用如下命令以实际提交改动：<br><code>git commit -m&quot;代码提交信息&quot;</code><br>现在，你的改动已经提交到了HEAD，但是还没到你的远端仓库。</p>
<h1 id="推送改动">推送改动</h1><p>你的改动现在已经在本地仓库的HEAD中了。执行如下命令以将这些改动提交到远端仓库：<br><code>git push origin master</code><br>可以把master换成你想要推送的任何分支。</p>
<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<br><code>git remote add origin &lt;server&gt;</code><br>如此你就能够将你的改动推送到所添加的服务器上去了。</p>
<h1 id="分支">分支</h1><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/git_2.jpg" alt=""><br>创建一个叫做“feature_x”的分支，并且换过去：<br><code>git checkout -b feature_x</code><br>切换回主分支：<br><code>git checkout master</code><br>再把新建的分支删掉:<br><code>git branch -d feature_x</code><br>除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：<br><code>git push origin &lt;branch&gt;</code></p>
<h1 id="更新与合并">更新与合并</h1><p>要更新你的本地仓库至最新改动，执行：<br><code>git pull</code><br>以在你的工作目录中获取（fetch）并合并（merge）远端的改动。<br>要合并其他分支到你的当前分支（例如master），执行：<br><code>git merge &lt;branch&gt;</code><br>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致冲突（conflicts）。这时候就需要你修改这些文件来人肉合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记合并成功：<br><code>git add &lt;filename&gt;</code><br>在合并改动之前，也可以使用如下命令查看：<br><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p>
<h1 id="标签">标签</h1><p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：<br><code>git tag 1.0.0 1b2e1d63ff</code><br>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：<br><code>git log</code><br>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。</p>
<h1 id="替换本地改动">替换本地改动</h1><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：<br><code>git checkout -- &lt;filename&gt;</code><br>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。</p>
<p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：<br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>
<h1 id="有用的贴士">有用的贴士</h1><p>内建的图形化 git：<br><code>gitk</code><br>彩色的 git 输出：<br><code>git config color.ui true</code><br>显示历史记录时，只显示一行注释信息：<br><code>git config format.pretty oneline</code><br>交互地添加文件至缓存区：<br><code>git add -i</code><br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/git_3.jpg" alt=""></p>
<h1 id="链接与资源">链接与资源</h1><h2 id="图形化界面">图形化界面</h2><p><code>GitX (L) (OSX, open source)``
</code>Tower (OSX)<code>`
</code>Source Tree (OSX, free)<code>`GitHub for Mac (OSX, free)</code><br><code>GitBox (OSX)</code></p>
<h2 id="指南与手册">指南与手册</h2><p><a href="http://git-scm.com/book/en/v2" target="_blank" rel="external">Git 社区参考书</a><br><a href="http://git-scm.com/book/en/v2" target="_blank" rel="external">专业 Git</a><br><a href="http://think-like-a-git.net/" target="_blank" rel="external">如 git 思考</a><br><a href="https://help.github.com/" target="_blank" rel="external">GitHub 帮助</a><br><a href="http://marklodato.github.io/visual-git-guide/index-en.html" target="_blank" rel="external">图形化的 Git 指南一则</a></p>
<h1 id="自认为比较好的Git学习教材">自认为比较好的Git学习教材</h1><ul>
<li><a href="https://www.atlassian.com/git/tutorials/" target="_blank" rel="external">https://www.atlassian.com/git/tutorials/</a></li>
<li><a href="http://git.oschina.net/progit/" target="_blank" rel="external">http://git.oschina.net/progit/</a></li>
<li><a href="http://www.cnblogs.com/whthomas/p/4564906.html" target="_blank" rel="external">http://www.cnblogs.com/whthomas/p/4564906.html</a></li>
<li><a href="http://www.imooc.com/article/1426" target="_blank" rel="external">http://www.imooc.com/article/1426</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[学会Git才发现自己是一个混迹互联网的coder]]>
    
    </summary>
    
      <category term="码农必备常识" scheme="http://www.xuanzhangjiong.xyz/tags/%E7%A0%81%E5%86%9C%E5%BF%85%E5%A4%87%E5%B8%B8%E8%AF%86/"/>
    
      <category term="Git" scheme="http://www.xuanzhangjiong.xyz/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MVC、MVP、MVVM的个人理解]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/07/15/MVC%E3%80%81MVP%E3%80%81MVVM%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/07/15/MVC、MVP、MVVM的个人理解/</id>
    <published>2015-07-15T12:32:08.000Z</published>
    <updated>2015-12-19T13:05:54.000Z</updated>
    <content type="html"><![CDATA[<p>从最初的只要把功能实现出来可以不择手段，到代码太乱了，整理整理吧，再到看看别人写的代码，那就把每个类分分类吧。嗯，再看看那些开源的项目，自己不得不开始思考系统架构了，因为，它就好比代码中的书法，然而它比书法更重要，因为，有一个好的架构不仅可以使得项目更加便于阅读，理解，甚至在有些时候执行效率也更好，so…..</p>
<p>MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身很容易理解，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。</p>
<h1 id="一、MVC">一、MVC</h1><p>MVC模式的意思是，软件可以分成三个部分。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/mvc_1.png" alt=""></p>
<ul>
<li>视图（View）：用户界面。</li>
<li>控制器（Controller）：业务逻辑</li>
<li>模型（Model）：数据保存<br><br></li>
</ul>
<hr>
<p>各部分之间的通信方式如下。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/mvc_2.png" alt=""></p>
<ol>
<li>View 传送指令到 Controller</li>
<li>Controller 完成业务逻辑后，要求 Model 改变状态</li>
<li>Model 将新的数据发送到 View，用户得到反馈</li>
</ol>
<p>所有通信都是单向的。</p>
<h1 id="二、互动模式">二、互动模式</h1><p>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/mvc_3.png" alt=""></p>
<p>另一种是直接通过controller接受指令。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/mvc_4.png" alt=""></p>
<h1 id="三、实例：Backbone">三、实例：Backbone</h1><p>但是实际项目往往采取更加灵活的方式，以 Backbone.js 为例。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/mvc_5.png" alt=""></p>
<ol>
<li>用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。</li>
<li>用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。</li>
<li>Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器） 。</li>
</ol>
<h1 id="四、MVP">四、MVP</h1><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/mvp.png" alt=""></p>
<ol>
<li>各部分之间的通信，都是双向的。</li>
<li>View 与 Model 不发生联系，都通过 Presenter 传递。</li>
<li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li>
</ol>
<h1 id="五、MVVM">五、MVVM</h1><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/mvvm.png" alt=""></p>
<p>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。Angular 和 Ember 都采用这种模式。</p>
]]></content>
    <summary type="html">
    <![CDATA[对3种系统架构的浅显理解]]>
    
    </summary>
    
      <category term="常见3种架构" scheme="http://www.xuanzhangjiong.xyz/tags/%E5%B8%B8%E8%A7%813%E7%A7%8D%E6%9E%B6%E6%9E%84/"/>
    
      <category term="架构" scheme="http://www.xuanzhangjiong.xyz/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开篇]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/06/20/%E5%BC%80%E7%AF%87/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/06/20/开篇/</id>
    <published>2015-06-20T11:50:11.000Z</published>
    <updated>2015-12-07T08:56:27.000Z</updated>
    <content type="html"><![CDATA[<p>今天很开心，因为毕业了～！！！可以有时间好好学习自己想学的东西，专心做一个coder。</p>
<h1 id="简介">简介</h1><p>前一段时间，了解了一些搭建个人博客的方法，比较起来，hexo在我眼里秒杀一切，或许是由于我对<a href="http://www.nodejs.org" target="_blank" rel="external">node</a>中毒太深吧。</p>
<p>在阿里云上买了一个域名＋<a href="https://pages.github.com" target="_blank" rel="external">GitHub Pages</a>＋<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>,以成本价4RMB的价格搭建了我的<a href="http://www.xuanzhangjiong.xyz">blog</a>。<br>大家如果也希望搭建自己的blog的话，看几篇教程，没有发现特别完整的，我也是看了n篇，然后把<a href="https://hexo.io" target="_blank" rel="external">https://hexo.io</a>上的DOCS看完，选一个自己心仪的主题，定制成自己喜欢的风格，然后就可以开始自己的blog之路了。<br>对了如果你的blog中图片太多的话，建议你用七牛云存储，不是帮他们打广告哈，只是没有CDN加速，访问效率可能真的真的…<br>这是我的邀请链接：<a href="https://portal.qiniu.com/signup?code=3ll21mpkdin2q" target="_blank" rel="external">https://portal.qiniu.com/signup?code=3ll21mpkdin2q</a>，好人一生平安，嘻嘻。</p>
<h1 id="定位">定位</h1><p>我喜欢移动开发，擅长Android开发，但也不乏对iOS、Javascript全栈有着浓厚的兴趣，虽然现在只是个菜，但是希望以后能成为一颗大白菜。也许有人会说以后以后只会从事一个方向的工作，何必学着么多呢，我也曾想过，坚持下去的理由却很简单：喜欢就好，何必在乎这么多呢。所以以后我的blog的定位也是：</p>
<blockquote>
<p>Android<br>iOS<br>Web前端<br>Git<br>Node.js</p>
</blockquote>
<p>边学习边分享吧，大家共同进步。</p>
<h1 id="初衷">初衷</h1><p>写博客只为记录自己的开发历程，希望自己在这个互联网时代中留下一些自己的足迹，证明自己也曾为开源做过贡献。</p>
]]></content>
    <summary type="html">
    <![CDATA[磨蹭了几个月的blog终于开篇了]]>
    
    </summary>
    
      <category term="毕业季" scheme="http://www.xuanzhangjiong.xyz/tags/%E6%AF%95%E4%B8%9A%E5%AD%A3/"/>
    
      <category term="生活小记" scheme="http://www.xuanzhangjiong.xyz/categories/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
</feed>
