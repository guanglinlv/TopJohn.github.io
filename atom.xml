<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[TopJohn'Blog]]></title>
  <subtitle><![CDATA[Coding的路上，至少我乐在其中...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.xuanzhangjiong.xyz/"/>
  <updated>2015-12-09T08:30:54.000Z</updated>
  <id>http://www.xuanzhangjiong.xyz/</id>
  
  <author>
    <name><![CDATA[John]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[偶遇Git]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/08/07/%E5%81%B6%E9%81%87Git/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/08/07/偶遇Git/</id>
    <published>2015-08-07T11:26:41.000Z</published>
    <updated>2015-12-09T08:30:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="吐槽">吐槽</h1><p>说起Git，在很久以前就认识它，但是仅仅是知道它的存在，却从未和它交流过。</p>
<p>本科的时候，一直使用svn，而且是TortoiseGit，就是那只传说中的小乌龟，可视化的界面，导致我从来不用bash。</p>
<p>前段时间，跟着导师做一个创业项目，在做前期准备的时候，一句你们用过Git嘛，我的学生Git是一项必备技能。顿时好尴尬，只好硬着头皮说学过一点。然后就是不停地看各种blog。</p>
<p>前前后后也学习了一段时间，来写写自己学习Git的理解吧。</p>
<h1 id="三种状态">三种状态</h1><p>首先要理解你的本地仓库由git维护的三棵“树”组成。第一个是你的工作目录，它持有实际文件；第二个是缓存区（Index）它像个缓存区，临时保存你的改动；最后是HEAD，指向你最近一次提交后的结果。</p>
<blockquote>
<p>WorkingDirectory Index HEAD 三大状态，对理解Git工作原理很有帮助。</p>
</blockquote>
<p><img src="http://7xoz2q.com1.z0.glb.clouddn.com/git_1.jpg" alt="三种状态" title="三种状态"></p>
<h1 id="检出仓库">检出仓库</h1><p>执行如下命令以创建一个本地仓库的克隆版本<br><code>git clone /path/to/repository</code><br>如果是远端服务器上的仓库，你的命令会是这个样子：<br><code>git clone username@host:/path/to/repository</code></p>
<h1 id="添加与提交">添加与提交</h1><p>你可以计划改动（把它们添加到缓存区），使用如下命令：<br><code>git add &lt;filename&gt;</code><br><code>add *</code><br><code>add .</code><br>这是git基本工作流程的第一步；使用如下命令以实际提交改动：<br><code>git commit -m&quot;代码提交信息&quot;</code><br>现在，你的改动已经提交到了HEAD，但是还没到你的远端仓库。</p>
<h1 id="推送改动">推送改动</h1><p>你的改动现在已经在本地仓库的HEAD中了。执行如下命令以将这些改动提交到远端仓库：<br><code>git push origin master</code><br>可以把master换成你想要推送的任何分支。</p>
<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<br><code>git remote add origin &lt;server&gt;</code><br>如此你就能够将你的改动推送到所添加的服务器上去了。</p>
<h1 id="分支">分支</h1><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。<br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/git_2.jpg" alt=""><br>创建一个叫做“feature_x”的分支，并且换过去：<br><code>git checkout -b feature_x</code><br>切换回主分支：<br><code>git checkout master</code><br>再把新建的分支删掉:<br><code>git branch -d feature_x</code><br>除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：<br><code>git push origin &lt;branch&gt;</code></p>
<h1 id="更新与合并">更新与合并</h1><p>要更新你的本地仓库至最新改动，执行：<br><code>git pull</code><br>以在你的工作目录中获取（fetch）并合并（merge）远端的改动。<br>要合并其他分支到你的当前分支（例如master），执行：<br><code>git merge &lt;branch&gt;</code><br>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致冲突（conflicts）。这时候就需要你修改这些文件来人肉合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记合并成功：<br><code>git add &lt;filename&gt;</code><br>在合并改动之前，也可以使用如下命令查看：<br><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p>
<h1 id="标签">标签</h1><p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：<br><code>git tag 1.0.0 1b2e1d63ff</code><br>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：<br><code>git log</code><br>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。</p>
<h1 id="替换本地改动">替换本地改动</h1><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：<br><code>git checkout -- &lt;filename&gt;</code><br>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。</p>
<p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：<br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>
<h1 id="有用的贴士">有用的贴士</h1><p>内建的图形化 git：<br><code>gitk</code><br>彩色的 git 输出：<br><code>git config color.ui true</code><br>显示历史记录时，只显示一行注释信息：<br><code>git config format.pretty oneline</code><br>交互地添加文件至缓存区：<br><code>git add -i</code><br><img src="http://7xoz2q.com1.z0.glb.clouddn.com/git_3.jpg" alt=""></p>
<h1 id="链接与资源">链接与资源</h1><p>图形化界面<br><code>GitX (L) (OSX, open source)``
</code>Tower (OSX)<code>`
</code>Source Tree (OSX, free)<code>`GitHub for Mac (OSX, free)</code><br><code>GitBox (OSX)</code></p>
<h2 id="指南与手册">指南与手册</h2><p><a href="http://git-scm.com/book/en/v2" target="_blank" rel="external">Git 社区参考书</a><br><a href="http://git-scm.com/book/en/v2" target="_blank" rel="external">专业 Git</a><br><a href="http://think-like-a-git.net/" target="_blank" rel="external">如 git 思考</a><br><a href="https://help.github.com/" target="_blank" rel="external">GitHub 帮助</a><br><a href="http://marklodato.github.io/visual-git-guide/index-en.html" target="_blank" rel="external">图形化的 Git 指南一则</a></p>
<h1 id="自认为比较好的Git学习教材">自认为比较好的Git学习教材</h1><ul>
<li><a href="https://www.atlassian.com/git/tutorials/" target="_blank" rel="external">https://www.atlassian.com/git/tutorials/</a></li>
<li><a href="http://git.oschina.net/progit/" target="_blank" rel="external">http://git.oschina.net/progit/</a></li>
<li><a href="http://www.cnblogs.com/whthomas/p/4564906.html" target="_blank" rel="external">http://www.cnblogs.com/whthomas/p/4564906.html</a></li>
<li><a href="http://www.imooc.com/article/1426" target="_blank" rel="external">http://www.imooc.com/article/1426</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[学会Git才发现自己是一个混迹互联网的coder]]>
    
    </summary>
    
      <category term="码农必备常识" scheme="http://www.xuanzhangjiong.xyz/tags/%E7%A0%81%E5%86%9C%E5%BF%85%E5%A4%87%E5%B8%B8%E8%AF%86/"/>
    
      <category term="Git" scheme="http://www.xuanzhangjiong.xyz/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开篇]]></title>
    <link href="http://www.xuanzhangjiong.xyz/2015/06/20/%E5%BC%80%E7%AF%87/"/>
    <id>http://www.xuanzhangjiong.xyz/2015/06/20/开篇/</id>
    <published>2015-06-20T11:50:11.000Z</published>
    <updated>2015-12-07T08:56:27.000Z</updated>
    <content type="html"><![CDATA[<p>今天很开心，因为毕业了～！！！可以有时间好好学习自己想学的东西，专心做一个coder。</p>
<h1 id="简介">简介</h1><p>前一段时间，了解了一些搭建个人博客的方法，比较起来，hexo在我眼里秒杀一切，或许是由于我对<a href="http://www.nodejs.org" target="_blank" rel="external">node</a>中毒太深吧。</p>
<p>在阿里云上买了一个域名＋<a href="https://pages.github.com" target="_blank" rel="external">GitHub Pages</a>＋<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>,以成本价4RMB的价格搭建了我的<a href="http://www.xuanzhangjiong.xyz">blog</a>。<br>大家如果也希望搭建自己的blog的话，看几篇教程，没有发现特别完整的，我也是看了n篇，然后把<a href="https://hexo.io" target="_blank" rel="external">https://hexo.io</a>上的DOCS看完，选一个自己心仪的主题，定制成自己喜欢的风格，然后就可以开始自己的blog之路了。<br>对了如果你的blog中图片太多的话，建议你用七牛云存储，不是帮他们打广告哈，只是没有CDN加速，访问效率可能真的真的…<br>这是我的邀请链接：<a href="https://portal.qiniu.com/signup?code=3ll21mpkdin2q" target="_blank" rel="external">https://portal.qiniu.com/signup?code=3ll21mpkdin2q</a>，好人一生平安，嘻嘻。</p>
<h1 id="定位">定位</h1><p>我喜欢移动开发，擅长Android开发，但也不乏对iOS、Javascript全栈有着浓厚的兴趣，虽然现在只是个菜，但是希望以后能成为一颗大白菜。也许有人会说以后以后只会从事一个方向的工作，何必学着么多呢，我也曾想过，坚持下去的理由却很简单：喜欢就好，何必在乎这么多呢。所以以后我的blog的定位也是：</p>
<blockquote>
<p>Android<br>iOS<br>Web前端<br>Git<br>Node.js</p>
</blockquote>
<p>边学习边分享吧，大家共同进步。</p>
<h1 id="初衷">初衷</h1><p>写博客只为记录自己的开发历程，希望自己在这个互联网时代中留下一些自己的足迹，证明自己也曾为开源做过贡献。</p>
]]></content>
    <summary type="html">
    <![CDATA[磨蹭了几个月的blog终于开篇了]]>
    
    </summary>
    
      <category term="毕业季" scheme="http://www.xuanzhangjiong.xyz/tags/%E6%AF%95%E4%B8%9A%E5%AD%A3/"/>
    
      <category term="生活小记" scheme="http://www.xuanzhangjiong.xyz/categories/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
</feed>
